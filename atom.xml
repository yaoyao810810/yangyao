<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>等待！！！</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ccyyao.top/"/>
  <updated>2016-12-22T13:45:08.677Z</updated>
  <id>http://www.ccyyao.top/</id>
  
  <author>
    <name>YY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>H5+CSS3 2D 3D转换</title>
    <link href="http://www.ccyyao.top/2016/12/22/H5-CSS3-p3.html"/>
    <id>http://www.ccyyao.top/2016/12/22/H5-CSS3-p3.html</id>
    <published>2016-12-22T07:42:10.000Z</published>
    <updated>2016-12-22T13:45:08.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h2><p>概念：就是元素在 2D 平面上实现移动，旋转，缩放，斜切的操作就称之为 2D 转换<br><code>语法：transform：值</code><br>值：移动，旋转，缩放，斜切</p>
<h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><p><code>transform：translate()</code></p>
<p>参数说明：</p>
<ul>
<li>只有一个值的情况下，表示水平方向运动，正值向右，负值向左，也可以接受百分比，百分比参照的是自身的宽，高。</li>
<li>两个值分别控制水平和垂直</li>
<li>移动不会影响其他的元素，类似于相对定位</li>
<li>我们可以通过盒子的绝对定位配合 transform：translate（-50%，-50%）实现一个没有宽度高度的盒子水平垂直居中</li>
<li>如果想要单个的方向移动可以写成 translateX() 和 translateY()</li>
</ul>
<h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p><code>transform:rotaate()</code><br>参数说明：</p>
<ul>
<li>单位是 deg 角度</li>
<li>整体发生旋转（包括内容）</li>
<li>中心点可以控制</li>
</ul>
<h3 id="控制中心点"><a href="#控制中心点" class="headerlink" title="控制中心点"></a>控制中心点</h3><p><code>transform-origin:值</code>  </p>
<p>值说明：  </p>
<ul>
<li>值可以是方位名词，可以是像素，也可以是百分比（参照的自身的宽高）</li>
</ul>
<h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><p><code>transform:scale()</code>  </p>
<p>参数说明：  </p>
<ul>
<li>没有单位，接受数值和小数</li>
<li>只有一个值的情况，整体缩放（等比例）</li>
<li>两个值的情况，宽度和高度分别缩放，另外一个方向需要写一个1</li>
<li>缩放的中心点可以被控制</li>
</ul>
<h3 id="斜切"><a href="#斜切" class="headerlink" title="斜切"></a>斜切</h3><p><code>transform：skew（）</code><br>参数说明：</p>
<ul>
<li>单位是deg</li>
<li>只有一个值的情况下，水平斜切</li>
<li>两个值的情况下，水平垂直分别斜切</li>
<li>斜切的中心点可以被冬至如果是X轴斜切，中心点控制上下，如果是Y轴斜切，中心点控制左右</li>
</ul>
<p>总结：</p>
<ul>
<li>移动，斜切，放大都是可以通过X或者Y去控制某一个方向</li>
<li>中心点可以控制旋转，缩放，斜切</li>
<li><p>如果我们想要多个2D效果共存，需要采用连写的方式<br><code>transform:rotate(360deg) scale(2)</code>  </p>
</li>
<li><p>当在不同场景出现需要 transform 的时候，需要赋值前面已经存在的，防止覆盖，并用连写的方式集合到一条 transform 上</p>
</li>
<li>transform 的转换效果顺序尽量保持统一，如果不统一会出现一些问题<br><img src="http://www.ccyyao.top/images/lianxietu.png" alt="连写图片"></li>
</ul>
<h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><p>首先声明，过渡不是动画，是由 css 的一种状态到另外一种状态中间变换的过程，我们称为过渡<br><code>transition:值</code><br>值说明：</p>
<ul>
<li>那个属性需要过渡就写什么属性，可以用 all 来代替全部</li>
<li>过渡持续的时间，单位可以 s 或者是 ms </li>
<li>过渡的曲线 </li>
</ul>
<p><img src="(http://www.ccyyao.top/images/quxiantu.png" alt="曲线图"></p>
<ul>
<li>过渡从何时开始<br>css3 定义动画新策略： css3 的底层是 c++，而JQ 的 animate 是用定时器来完成的，所以说 css3 的运行效率会比 animate 高出很多，所以但凡是一些不是功能性的动画，不需要保证兼容的时候，一律推荐大家用 css3 趋势线，移动端的动画都用过渡去实现</li>
<li>display 和渐变是不能直接产生过渡的</li>
</ul>
<h2 id="3D-转换"><a href="#3D-转换" class="headerlink" title="3D 转换"></a>3D 转换</h2><h3 id="rotateX"><a href="#rotateX" class="headerlink" title="rotateX"></a>rotateX</h3><p>让元素围绕着 X 轴进行旋转</p>
<ul>
<li>正值表示推到，负值表示鞠躬</li>
<li>没有透视的 3D 是看不出来的<br><img src="(http://www.ccyyao.top/images/guodushuxing.png" alt="过渡属性"></li>
</ul>
<h3 id="rotateY"><a href="#rotateY" class="headerlink" title="rotateY"></a>rotateY</h3><p>围绕着 Y 轴进行旋转</p>
<ul>
<li>正数是逆时针，负数是顺时针</li>
</ul>
<h3 id="定义元素背过去是否可见"><a href="#定义元素背过去是否可见" class="headerlink" title="定义元素背过去是否可见"></a>定义元素背过去是否可见</h3><p><code>backface-visibility:visible | hidden</code> </p>
<p>说明：visible表示可见， hidden 表示不可见<br>测试贝塞尔曲线的网址：<a href="http://xuanfengge.com/easeing/ceaser/" target="_blank" rel="external">http://xuanfengge.com/easeing/ceaser/</a></p>
<h2 id="translateZ"><a href="#translateZ" class="headerlink" title="translateZ"></a>translateZ</h2><p>就是在Z轴上来灰移动，但是如果没有透视的情况下，完全看不出效果，所以，一般 transform：translateZ() 都是配合透视一起使用</p>
<h2 id="透视（景深）"><a href="#透视（景深）" class="headerlink" title="透视（景深）"></a>透视（景深）</h2><p><code>perspective:值</code>  </p>
<p>说明：透视值越小，透视效果越强，值越大，透视效果越弱，透视添加在父级身上</p>
<h2 id="灭点"><a href="#灭点" class="headerlink" title="灭点"></a>灭点</h2><p><code>perspective-origin：值</code> </p>
<p>说明：值可以是像素，也可以是百分比，还可以是方位名词，默认值是50%，50%（中心点）</p>
<h2 id="transform-style"><a href="#transform-style" class="headerlink" title="transform-style"></a>transform-style</h2><p>作用：规定被嵌套元素如何在3D 空间中显示  </p>
<p><code>tranform-style:值</code> </p>
<p>直说名：flat 是默认值，让子元素不保留其3D 位置， preserve-3d 让子元素保留其 3D 位置，加在父亲身上。<br>当元素发生3D 翻转的时候，整个坐标系也跟着发生了翻转。 </p>
<h2 id="css3-的动画"><a href="#css3-的动画" class="headerlink" title="css3 的动画"></a>css3 的动画</h2><p><code>animation:值</code><br><img src="(http://www.ccyyao.top/images/css3donghuashuxing.png" alt="css3动画属性"><br>值说明：</p>
<ul>
<li>自定义动画名</li>
<li>动画的持续时间 单位是 s 或者 ms</li>
<li>动画的曲线</li>
<li>动画从何时开始</li>
<li>控制动画执行的次数 没有单位，一直执行：infinite</li>
<li>控制动画是否逆序播放 默认值normal 逆序：altemate</li>
<li>控制动画的播放和暂停 默认值是播放：running  暂停：paused</li>
<li>动画最后的停留位置 forwards 让动画停留在最后一帧 </li>
</ul>
<p>动画一定要先写 animation 然后搭配 @keyframes 去写自定义的动画  </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">@前缀keyframes 自定义的动画名&#123;</div><div class="line"><span class="number">0</span>%&#123;</div><div class="line">	 <span class="comment">//css语句	</span></div><div class="line"> &#125;</div><div class="line"><span class="number">100</span>%&#123;</div><div class="line">		<span class="comment">//css语句</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> @keyframes laowang&#123;</div><div class="line"> 				<span class="number">0</span>%&#123;</div><div class="line"> 					<span class="attr">width</span>:<span class="number">100</span>px;</div><div class="line">			        height:<span class="number">100</span>px;</div><div class="line">			    	left:<span class="number">0</span>;	</div><div class="line"> 				&#125;</div><div class="line"> 				<span class="number">50</span>%&#123;</div><div class="line"> 					<span class="attr">width</span>:<span class="number">800</span>px;</div><div class="line"> 					height:<span class="number">800</span>px;</div><div class="line">					transform:rotate(<span class="number">720</span>deg);</div><div class="line">				&#125;</div><div class="line">				<span class="number">100</span>%&#123;</div><div class="line"> 					<span class="attr">width</span>:<span class="number">500</span>px;</div><div class="line">					height:<span class="number">500</span>px;</div><div class="line"> 					left:<span class="number">800</span>px;</div><div class="line"> 					transform:rotate(<span class="number">-720</span>deg);</div><div class="line">				&#125;</div><div class="line">			&#125;</div></pre></td></tr></table></figure>
<h2 id="帧动画-steps（帧数）"><a href="#帧动画-steps（帧数）" class="headerlink" title="帧动画 steps（帧数）"></a>帧动画 steps（帧数）</h2><p>起始就是让动画分成多少不去执行，steps（）里面的数值是总画面熟 -1，在制作精灵图的时候每个画面的宽度尽量一致2，并且建议在一行里面摆放</p>
<h2 id="animate-css-库的使用"><a href="#animate-css-库的使用" class="headerlink" title="animate.css 库的使用"></a>animate.css 库的使用</h2><p>官网：<a href="https://daneden.github.io/animate.css/" target="_blank" rel="external">https://daneden.github.io/animate.css/</a><br>作用：将一切常见的动画直接封装，开发者不需要考虑实现过程，只需要添加对应的类就能实现动画效果<br>使用步骤：</p>
<ul>
<li>将下载下来的animate.css 引入到你的项目中</li>
<li>去官网获取想要的效果 给对应的元素添加上animated 类 （必填）和你想要的效果的类</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2D转换&quot;&gt;&lt;a href=&quot;#2D转换&quot; class=&quot;headerlink&quot; title=&quot;2D转换&quot;&gt;&lt;/a&gt;2D转换&lt;/h2&gt;&lt;p&gt;概念：就是元素在 2D 平面上实现移动，旋转，缩放，斜切的操作就称之为 2D 转换&lt;br&gt;&lt;code&gt;语法：transfor
    
    </summary>
    
      <category term="HTML5+CSS3" scheme="http://www.ccyyao.top/categories/HTML5-CSS3/"/>
    
    
      <category term="2D转换" scheme="http://www.ccyyao.top/tags/2D%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="3D转换" scheme="http://www.ccyyao.top/tags/3D%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>H5+CSS3-P2</title>
    <link href="http://www.ccyyao.top/2016/12/13/H5-CSS3-P2.html"/>
    <id>http://www.ccyyao.top/2016/12/13/H5-CSS3-P2.html</id>
    <published>2016-12-13T10:57:38.000Z</published>
    <updated>2016-12-22T07:21:25.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如同人类的的进化一样，CSS3是CSS2的“进化”版本，在CSS2基础上，增强或新增了许多特性， 弥补了CSS2的众多不足之处，使得Web开发变得更为高效和便捷。</p>
<h3 id="CSS3-的现状"><a href="#CSS3-的现状" class="headerlink" title="CSS3 的现状"></a>CSS3 的现状</h3><pre><code>- 浏览器支持程度差，需要添加私有前缀
- 移动端支持优于 pc 端
- 不断改进中
- 应用相对广泛
</code></pre><h3 id="如何对待"><a href="#如何对待" class="headerlink" title="如何对待"></a>如何对待</h3><pre><code>- 坚持渐进增强原则
- 考虑用户群体
- 遵照产品的方案
- 听 boss 的
</code></pre><a id="more"></a>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="统一环境"><a href="#统一环境" class="headerlink" title="统一环境"></a>统一环境</h3><p>由于css3兼容性问题的普遍存在，为了避免因兼容性带来的干扰，我们约定统一的环境，以保证学习的效率，在最后会单独说明兼容性的问题。</p>
<pre><code>- chrome 浏览器 version 46+
- Firefox 浏览器 firefox 42+
</code></pre><h3 id="如何使用手册"><a href="#如何使用手册" class="headerlink" title="如何使用手册"></a>如何使用手册</h3><p>学会使用工具，可以让我们事半功倍。</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>[]</td>
<td>全部可选项</td>
</tr>
<tr>
<td>两个竖线</td>
<td>并列</td>
</tr>
<tr>
<td>一个竖线</td>
<td>多选一</td>
</tr>
<tr>
<td>?</td>
<td>0个或1个</td>
</tr>
<tr>
<td>*</td>
<td>0个或多个</td>
</tr>
<tr>
<td>{}</td>
<td>范围</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="选择器："><a href="#选择器：" class="headerlink" title="选择器："></a>选择器：</h2><p>分为关系选择器，属性选择器，伪类选择器</p>
<h3 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h3><pre><code>- 后代选择器 ul li 选择所有的后代元素
- 子代选择器 ul&gt;li 选择.box 后面的一个li元素
- 紧邻选择器 .box+li选择.box 后面的一个li 元素
- 兄弟选择器 .box~li 选择 .box 后面所有的li元素
</code></pre><h3 id="属性选择器：通过属性来选择对应的元素"><a href="#属性选择器：通过属性来选择对应的元素" class="headerlink" title="属性选择器：通过属性来选择对应的元素"></a>属性选择器：通过属性来选择对应的元素</h3><ul>
<li>E[属性名]:选择所有的具备这个属性的E元素</li>
<li>E[属性名=值]：选择所有的具备这个‘属性=对应值’的E元素</li>
<li>E[属性名~=值]：选择所有的包含这个‘属性=对应值’的E元素css3 新增的</li>
<li>E[属性名^=值]：从头去匹配这个‘属性=对应值’的E 元素</li>
<li>E[属性名$=值]：从尾去匹配这个‘属性=对应值’的E 元素</li>
<li>E[属性名*=值]：从任意位置去匹配这个‘属性=对应值’的E 元素</li>
</ul>
<h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p><code>before  after  a：link</code></p>
<ul>
<li>E:first-child 从父级出发找到第一个孩子为E的元素（css2）</li>
<li>E：last-child 从父级出发找到最后一个孩子为E的元素（css3）</li>
<li>E：nth-child（N）从父级出发找到第N个孩子为E的元素（css3)</li>
<li>小知识：<ul>
<li>even 控制偶数   odd 控制奇数</li>
<li>nth-child() 特别类似的一个选择器 nth-of-type()</li>
</ul>
</li>
</ul>
<h3 id="其他选择器"><a href="#其他选择器" class="headerlink" title="其他选择器"></a>其他选择器</h3><ul>
<li>input:focus{}       选择获取焦点的表单</li>
<li>input:enabled{}     选择可操控的表单元素</li>
<li>input:disabled{}    选择不可操控的表单</li>
<li>E:target{}          选择通过锚点跳转的当前E 元素</li>
<li>E:empty{}           选择没有字节点的E 元素包括文本节点</li>
<li>Input:checked       选择被选中的 checkbox 表单</li>
</ul>
<hr>
<h2 id="伪元素-before-after"><a href="#伪元素-before-after" class="headerlink" title="伪元素 before after"></a>伪元素 before after</h2><p>作用：渲染一个虚拟的标签插入到当前元素的内部的前面或者后面<br>总结：</p>
<ul>
<li>伪元素默认是行内元素，我们可以进行转化，在实际工作中，多用来模拟一些小的标签去装饰</li>
<li>因为伪元素是不存在的，所以不能直接用 JS 去获取（可以利用类去覆盖之前的样式）</li>
<li>清除浮动的底层原理：就是让一个伪元素（因为伪元素不占dom内存）去清除浮动，从而节约了dom内存</li>
<li>text-indent 针对伪类不起作用</li>
<li>当伪类需要配合 iconfont 去使用的话需要打开 iconfont.css 拿到 content 里面对应的值</li>
<li>当伪元素需要 hover 的效果的时候不能直接 hover 需要借助于父级 写法：<code>父级：hover：伪元素</code></li>
<li>content 一定不能省略，即使里面没有内容</li>
</ul>
<h2 id="字体的用法"><a href="#字体的用法" class="headerlink" title="字体的用法"></a>字体的用法</h2><p>网址：<code>http://www.iconfont.cn/</code> 阿里<br><code>http://www.youziku.com/</code> 有字库<br>兼容：支持所有的浏览器<br><img src="http://www.ccyyao.top/images/webfont1.png" alt="文字样式"></p>
<hr>
<h2 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h2><p><code>broder-radius:值</code><br><img src="http://www.ccyyao.top/images/yuanjiaotu.png" alt="圆角图"><br><img src="http://www.ccyyao.top/images/yuanjiaotu2.png" alt="圆角图"></p>
<ul>
<li>一个值设置的是盒子的四个角的水平和垂直半径</li>
<li>每个角都可以单独进行设置，其取值顺序是左上 右上 右下 左下顺时针设置</li>
<li>可以简写 简写的逻辑跟 padding 和 margin 一样</li>
<li>单位支持像素，和百分比（参照的是宽度和高度）</li>
<li>可以用水平半径/垂直半径 去单独控制半径 并且每一个半径都可以单独控制</li>
</ul>
<h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><p><code>语法：box-shadow:值</code><br>值说明：</p>
<ul>
<li>第一个值：N px 阴影向水平方向偏移N 个像素 正数往右 负数往左</li>
<li>第二个值：N px 阴影向垂直方向偏移N 个像素 正数往下 负数往上</li>
<li>第三个值：羽化大小(模糊的大小)</li>
<li>第四个值：阴影尺寸大小</li>
<li>第五个值：颜色 默认是黑色</li>
<li>第六个值：内外阴影 默认是外阴影 内阴影是 inset</li>
<li>阴影可以写多个，中间用逗号隔开</li>
<li>阴影可以简写，但是需要注意有一些值需要补0</li>
</ul>
<p>文字阴影</p>
<blockquote>
<p>语法：text-shadow:水平偏移 垂直偏移 羽化大小 颜色</p>
</blockquote>
<h2 id="边框图片"><a href="#边框图片" class="headerlink" title="边框图片"></a>边框图片</h2><blockquote>
<p>语法：border-image:值。   遵从的是九宫格式切图，上下左右分别来一刀</p>
</blockquote>
<p>值说明：</p>
<ul>
<li>border-image-source:url(‘border.png’):图片路径</li>
<li>border-image-slice:26 图片切割，不要带单位，遵从九宫格式切图法（上下左右各来一刀）</li>
<li>border-image-repeat:round 或者 stretch 或者 repeat round 没有瑕疵， stretch 默认拉伸， repeat 平铺 有瑕疵</li>
<li>简写：border-image：url(‘border.png’) 26 round;</li>
</ul>
<hr>
<h2 id="背景系列"><a href="#背景系列" class="headerlink" title="背景系列"></a>背景系列</h2><h3 id="背景图片的基准点"><a href="#背景图片的基准点" class="headerlink" title="背景图片的基准点"></a>背景图片的基准点</h3><blockquote>
<p>语法：background-origin：值<br>值说明：</p>
<ul>
<li>border-box:忽略边框，直接从边框的起始0,0点平铺</li>
<li>padding-box:默认值，忽略 padding 直接从padding 的起始0,0点平铺</li>
<li>content-box：从内容部分开始平铺 跟 padding有关系</li>
</ul>
</blockquote>
<h3 id="多重背景"><a href="#多重背景" class="headerlink" title="多重背景"></a>多重背景</h3><p>说明：背景图片之间用逗号隔开，可以写多组，最先渲染的图片有可能会遮住后面渲染的图片</p>
<h3 id="控制背景图片的大小"><a href="#控制背景图片的大小" class="headerlink" title="控制背景图片的大小"></a>控制背景图片的大小</h3><blockquote>
<p>语法： background-size：值<br>值说明：</p>
<ul>
<li>当只有一个值的情况下，宽度实现拉伸，并且高度会保持等比例，可以支持px，也可以支持百分比，百分比参照的是这个盒子本身的宽度</li>
<li>当有两个值的情况下，宽度和高度会分别拉伸到对应的值，可能会变形，可以支持px，也可以支持百分比，百分比参照的是这个盒子本身的宽度</li>
<li>contain 当图片的宽度或者是高度在缩放的时候域一个 碰到 了盒子的边缘，则停止变化</li>
<li>contain 的基础上保证不留白，这就是cover的效果</li>
</ul>
</blockquote>
<h2 id="盒子内减"><a href="#盒子内减" class="headerlink" title="盒子内减"></a>盒子内减</h2><p>之前盒子的实际宽是 实际宽度=width+padding+border， 而内减属性会自动帮我们 padding 和 border 值，所以用了内减的盒子实际宽度就等于width，至于 padding 和 border 的值会自动被 width 内减</p>
<hr>
<h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><blockquote>
<p>background:-webkit-linear-gradient(起始位置，颜色一 位置，颜色二 位置…)</p>
<ul>
<li>需要添加私有前缀</li>
<li>起始 位置建议用方位名词去控制</li>
</ul>
</blockquote>
<h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><blockquote>
<p>background:-webkit-radial-gradient(起始位置，颜色一 位置，颜色二 位置…)</p>
<ul>
<li>起始位置可以是方位名词 也可以是角度，角度主要是渐变线的角度，渐变线默认是水平方向 箭头朝右，正值逆时针旋转 负数反之（线性渐变）</li>
<li>不支持角度 支持像素和方位名词（径向渐变）</li>
</ul>
</blockquote>
<h3 id="私有前缀"><a href="#私有前缀" class="headerlink" title="私有前缀"></a>私有前缀</h3><p>每一天css3属性合理来说都需要添加对应浏览器的前缀，以保证其兼容性</p>
<ul>
<li>谷歌 苹果：-webkit-</li>
<li>火狐 ：-moz-</li>
<li>IE ：-ms-</li>
<li>o ：-o-<br>小细节：在手机端，一般来说只需要写一个-webkit-（针对国内的绝大部分手机端）添加的位置：大部分都是直接添加到最前面，css 没有的属性都是添加在最前面的，有一些事css2 就有的属性是添加在后面的（background：-wibkit-linear-gradient（））</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;如同人类的的进化一样，CSS3是CSS2的“进化”版本，在CSS2基础上，增强或新增了许多特性， 弥补了CSS2的众多不足之处，使得Web开发变得更为高效和便捷。&lt;/p&gt;
&lt;h3 id=&quot;CSS3-的现状&quot;&gt;&lt;a href=&quot;#CSS3-的现状&quot; class=&quot;headerlink&quot; title=&quot;CSS3 的现状&quot;&gt;&lt;/a&gt;CSS3 的现状&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- 浏览器支持程度差，需要添加私有前缀
- 移动端支持优于 pc 端
- 不断改进中
- 应用相对广泛
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;如何对待&quot;&gt;&lt;a href=&quot;#如何对待&quot; class=&quot;headerlink&quot; title=&quot;如何对待&quot;&gt;&lt;/a&gt;如何对待&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- 坚持渐进增强原则
- 考虑用户群体
- 遵照产品的方案
- 听 boss 的
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="HTML5+CSS3" scheme="http://www.ccyyao.top/categories/HTML5-CSS3/"/>
    
    
      <category term="选择器" scheme="http://www.ccyyao.top/tags/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
      <category term="伪元素 before after" scheme="http://www.ccyyao.top/tags/%E4%BC%AA%E5%85%83%E7%B4%A0-before-after/"/>
    
      <category term="字体用法" scheme="http://www.ccyyao.top/tags/%E5%AD%97%E4%BD%93%E7%94%A8%E6%B3%95/"/>
    
      <category term="圆角 阴影" scheme="http://www.ccyyao.top/tags/%E5%9C%86%E8%A7%92-%E9%98%B4%E5%BD%B1/"/>
    
      <category term="边框图片" scheme="http://www.ccyyao.top/tags/%E8%BE%B9%E6%A1%86%E5%9B%BE%E7%89%87/"/>
    
      <category term="渐变" scheme="http://www.ccyyao.top/tags/%E6%B8%90%E5%8F%98/"/>
    
  </entry>
  
  <entry>
    <title>nodejs_p2</title>
    <link href="http://www.ccyyao.top/2016/12/13/nodejs-p2.html"/>
    <id>http://www.ccyyao.top/2016/12/13/nodejs-p2.html</id>
    <published>2016-12-13T01:26:12.000Z</published>
    <updated>2016-12-13T01:30:50.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关介绍"><a href="#相关介绍" class="headerlink" title="相关介绍"></a>相关介绍</h1><h2 id="相关问题！"><a href="#相关问题！" class="headerlink" title="相关问题！"></a>相关问题！</h2><ul>
<li>写分号!</li>
<li>有种不详-的预感!(不用担心，用心就好!)</li>
<li>module.exports exports  堆和栈!</li>
</ul>
<h3 id="seajs"><a href="#seajs" class="headerlink" title="seajs"></a>seajs</h3><ol>
<li>引包</li>
<li>载入主模块(seajs.use(‘./main’))</li>
<li>定义模块define(function(require,exports,module))</li>
</ol>
<h3 id="模块化的好处"><a href="#模块化的好处" class="headerlink" title="模块化的好处"></a>模块化的好处</h3><ul>
<li>1.开发效率高</li>
<li>2.可以利用</li>
<li>3.便于后期维!</li>
</ul>
<a id="more"></a>
<h3 id="seajs-和requirejs区别"><a href="#seajs-和requirejs区别" class="headerlink" title="seajs 和requirejs区别"></a>seajs 和requirejs区别</h3><ul>
<li><p>seajs [按需加载]</p>
<ul>
<li>其实就是我们可以在define对应的<br>function中任何位置使用require()</li>
</ul>
</li>
<li><p>requirejs  [加载前置]</p>
<ul>
<li>其实就是在我们define对应的function执行之前，帮我们引入模块</li>
</ul>
</li>
</ul>
<h2 id="JavaScript是世界上最好的语言"><a href="#JavaScript是世界上最好的语言" class="headerlink" title="JavaScript是世界上最好的语言?"></a>JavaScript是世界上最好的语言?</h2><ul>
<li><p>我是中国人，我爱自己的祖国!</p>
</li>
<li><p>js 我们知道可以在浏览器中运行</p>
</li>
</ul>
<h2 id="1-node"><a href="#1-node" class="headerlink" title="1.node"></a>1.node</h2><ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="1-1-node是什么"><a href="#1-1-node是什么" class="headerlink" title="1.1. node是什么?"></a>1.1. node是什么?</h3><ul>
<li>node中也包含js解析引擎(node现在用的就是V8引擎!，速度非常快)</li>
<li>node</li>
<li>php/后端使用的语言 (后端写的代码是服务器!)<ul>
<li>区分前端和后端(就看最终代码是在哪里执行的，在浏览器中执行，就是前端写的)</li>
</ul>
</li>
<li><p>node 【<em>其实是一个包含的js解析引擎(V8)的软件!</em>】 （可以在后端使用）</p>
<ul>
<li>有了js解析引擎就会解析js代码</li>
</ul>
</li>
<li><p>浏览器的js</p>
<ul>
<li>可以通过js操作html</li>
<li>DOM(和操作html有关),BOM(和浏览器有关),ECMA(就是js语法规范)</li>
</ul>
</li>
<li>node中的js<ul>
<li>没有DOM,没有BOM,有ECMA</li>
<li>window(也就是说没有wiondow对象)</li>
</ul>
</li>
</ul>
<h3 id="1-2-node安装"><a href="#1-2-node安装" class="headerlink" title="1.2. node安装"></a>1.2. node安装</h3><h3 id="1-3-node快速开始"><a href="#1-3-node快速开始" class="headerlink" title="1.3. node快速开始"></a>1.3. node快速开始</h3><ul>
<li>1.10.xxx,node就开源<ul>
<li>开源的话，别人就可以贡献源码！</li>
<li>第三方社区: 觉得node更新太慢!<ul>
<li>第三方社区基于原来的node继续开发<br>加了很新东西</li>
</ul>
</li>
<li>合并: 4.x直接升到4.x<br>4.xxx 5.xx,6.xx,7.xx</li>
</ul>
</li>
</ul>
<h3 id="1-4-node中引入模块，和暴露数据"><a href="#1-4-node中引入模块，和暴露数据" class="headerlink" title="1.4 node中引入模块，和暴露数据"></a>1.4 node中引入模块，和暴露数据</h3><ul>
<li>引入模块,使用node中提供的 <code>require(&#39;./jakc.js&#39;)</code>方法</li>
<li>暴露数据使用的是 <code>module.exports = {xxx}</code><br>  或者 <code>exports.xxx = yyy</code></li>
</ul>
<h3 id="node中不仅包含js解析引擎，还包含服务器软件的功能"><a href="#node中不仅包含js解析引擎，还包含服务器软件的功能" class="headerlink" title="node中不仅包含js解析引擎，还包含服务器软件的功能"></a>node中不仅包含js解析引擎，还包含服务器软件的功能</h3><ul>
<li>我们电脑上只要安装了node,不需要其他的软件配置，就能够开启一个http服务</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><em>file协议，默认，是不能够发ajax请求的！</em></p>
<ul>
<li>服务器就是一台电脑(这个电脑是有独立ip)</li>
<li>我们的笔记本也是电脑(也可以把最终的项目代码放到笔记本上! ,但是没有公司愿意这么干)</li>
<li>操作系统都可能是一样的</li>
<li>服务器能运行的软件，我们电脑也能运行</li>
</ul>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量!"></a>环境变量!</h2><ul>
<li>我们在cmd窗口中敲一个命令,本质上是执行了一个程序(软件)</li>
<li>默认按下回车时，会到当前命令行所对应的目录寻找文件,如果找到立即执行</li>
<li>如果找不到呢?,就会到环境变量中的PATH中指定的目录寻找!</li>
</ul>
<p>例:我们把node的默认安装目录: C:\Program Files\nodejs,配置PATH上，那么<br>我们在cmd中敲命令时，如果当前目录找不到，就会到C:\Program Files\nodejs<br>目录寻找相应的文件执行!</p>
<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><ul>
<li>系统底层还是命令!</li>
<li>windows系统刚出来是没有界面的</li>
<li>在cmd中敲命令，会默认到当前命令行对应的目录找文件执行</li>
</ul>
<h2 id="服务器就是一台电脑"><a href="#服务器就是一台电脑" class="headerlink" title="服务器就是一台电脑"></a>服务器就是一台电脑</h2><ul>
<li>只是性能一般比我们普通电脑高!</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;相关介绍&quot;&gt;&lt;a href=&quot;#相关介绍&quot; class=&quot;headerlink&quot; title=&quot;相关介绍&quot;&gt;&lt;/a&gt;相关介绍&lt;/h1&gt;&lt;h2 id=&quot;相关问题！&quot;&gt;&lt;a href=&quot;#相关问题！&quot; class=&quot;headerlink&quot; title=&quot;相关问题！&quot;&gt;&lt;/a&gt;相关问题！&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;写分号!&lt;/li&gt;
&lt;li&gt;有种不详-的预感!(不用担心，用心就好!)&lt;/li&gt;
&lt;li&gt;module.exports exports  堆和栈!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;seajs&quot;&gt;&lt;a href=&quot;#seajs&quot; class=&quot;headerlink&quot; title=&quot;seajs&quot;&gt;&lt;/a&gt;seajs&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;引包&lt;/li&gt;
&lt;li&gt;载入主模块(seajs.use(‘./main’))&lt;/li&gt;
&lt;li&gt;定义模块define(function(require,exports,module))&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;模块化的好处&quot;&gt;&lt;a href=&quot;#模块化的好处&quot; class=&quot;headerlink&quot; title=&quot;模块化的好处&quot;&gt;&lt;/a&gt;模块化的好处&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.开发效率高&lt;/li&gt;
&lt;li&gt;2.可以利用&lt;/li&gt;
&lt;li&gt;3.便于后期维!&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="nodeJS" scheme="http://www.ccyyao.top/categories/nodeJS/"/>
    
    
      <category term="模块化的好处" scheme="http://www.ccyyao.top/tags/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E5%A5%BD%E5%A4%84/"/>
    
      <category term="seajs 和requirejs区别" scheme="http://www.ccyyao.top/tags/seajs-%E5%92%8Crequirejs%E5%8C%BA%E5%88%AB/"/>
    
      <category term="node是什么?" scheme="http://www.ccyyao.top/tags/node%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    
      <category term="环境变量" scheme="http://www.ccyyao.top/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>nodejs_p1</title>
    <link href="http://www.ccyyao.top/2016/12/13/nodejs-p1.html"/>
    <id>http://www.ccyyao.top/2016/12/13/nodejs-p1.html</id>
    <published>2016-12-13T01:14:50.000Z</published>
    <updated>2016-12-13T01:28:21.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nodeJS-基础"><a href="#nodeJS-基础" class="headerlink" title="nodeJS 基础"></a>nodeJS 基础</h1><h2 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h2><ul>
<li>模块化！</li>
<li>node(让我们熟悉前后端交互！)</li>
<li>压轴!6个人!(就业!) 移动App(手机软件!,微信,qq), （移动Web,运行浏览器中的）</li>
</ul>
<hr>
<h2 id="1-非模块化的方式"><a href="#1-非模块化的方式" class="headerlink" title="1.非模块化的方式!"></a>1.非模块化的方式!</h2><ul>
<li>全局变量的问题:<ul>
<li>1.容易有冲突，会污染全局环境！</li>
<li>2.js引用引用顺序很重要！<br>张三: var zhangsan={name,city}<br>李四: var lisi = {name:xx,city:’xxx’}</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="2-解决方式"><a href="#2-解决方式" class="headerlink" title="2.解决方式"></a>2.解决方式</h2><h3 id="2-1-命名空间"><a href="#2-1-命名空间" class="headerlink" title="2.1 命名空间!"></a>2.1 命名空间!</h3><ul>
<li>案例: jack,rose</li>
<li>可以解决文件引用顺序问题!</li>
<li>其实就是把原来数据，写到对象里了!</li>
</ul>
<h3 id="2-1-私有命名空间"><a href="#2-1-私有命名空间" class="headerlink" title="2.1 私有命名空间!"></a>2.1 私有命名空间!</h3><ul>
<li>案例: jack,rose</li>
<li>可以解决，别人随便更改我们数据的问题！<ul>
<li>其实是通过调用方法，来返回一个变量(局部的，这样外部就不能够访问了)</li>
</ul>
</li>
</ul>
<h3 id="2-3-封闭原则-千万不要改源码"><a href="#2-3-封闭原则-千万不要改源码" class="headerlink" title="2.3 封闭原则(千万不要改源码!)"></a>2.3 封闭原则(千万不要改源码!)</h3><ul>
<li>计算器!</li>
<li>尽量不要改第三方库源码(不改js文件中的代码)</li>
<li>但是我们可以扩展它的功能!</li>
</ul>
<h2 id="度"><a href="#度" class="headerlink" title="度!"></a>度!</h2><h2 id="前端东西太多！"><a href="#前端东西太多！" class="headerlink" title="前端东西太多！"></a>前端东西太多！</h2><ul>
<li>网站！ hao123!(仅仅是呈现一些内容！)</li>
<li>呈现内容！（交互！）</li>
<li>流量(网站用户量)，</li>
<li><p><em>需求</em>！</p>
</li>
<li><p>静态页面！，只是呈现数据！</p>
</li>
<li>用户的需求变大了！（交互, 样式/动画 ,js)</li>
<li><p>百度!(功能变化！)</p>
</li>
<li><p>以前最多用到jquery!<br>a,页面用了轮播, 1.1.1<br>a.页面用了tab选项卡 1.1.2</p>
</li>
<li><p><em>一有部分后端人员，转到前端！</em></p>
<ul>
<li>带来了一些新思想，新技术！</li>
</ul>
</li>
<li><p>angular是java</p>
</li>
<li>积淀!</li>
<li>页面复杂，代码变多！</li>
<li>大一统！</li>
</ul>
<h2 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范!"></a>模块化规范!</h2><ul>
<li><p>一个模块可能依赖()于另外的模块</p>
</li>
<li><p>如我们要造房子:</p>
<ul>
<li>1.先设置房子<ul>
<li>发现需要什么再去买什么</li>
</ul>
</li>
<li>2.一个模块(可以把一个模块写到一个js文件中),<ul>
<li>一个A.js可以依赖于另一个B.js(可以在代码中表明依赖依赖关系)</li>
<li>我们代码在执行时,</li>
</ul>
</li>
</ul>
</li>
<li>CMD : 【按需要加载】!,A.js需要B.js时，我们就去加载B.js<ul>
<li>对应 seajs// 进行模块化开发的库！</li>
</ul>
</li>
<li><p>AMD : 提前加载,我A.js需要什么，就提前加载好</p>
<ul>
<li>对应 RequireJS</li>
</ul>
</li>
<li><p>规范，只是一个约定,可以遵守，也可以不遵守!</p>
</li>
</ul>
<h2 id="1-非模块化的方式-1"><a href="#1-非模块化的方式-1" class="headerlink" title="1. 非模块化的方式"></a>1. 非模块化的方式</h2><ul>
<li>全局变量(globalVariable)问题</li>
</ul>
<h2 id="2-相关规范"><a href="#2-相关规范" class="headerlink" title="2. 相关规范"></a>2. 相关规范</h2><h3 id="2-1-CMD-前端模块化规范"><a href="#2-1-CMD-前端模块化规范" class="headerlink" title="2.1 CMD (前端模块化规范)"></a>2.1 CMD (前端模块化规范)</h3><ul>
<li>模块之间按需加载<ul>
<li>如:如果a模块用到b,先加载a模块，再加载b模块</li>
</ul>
</li>
</ul>
<h3 id="2-2-AMD-前端模块化规范"><a href="#2-2-AMD-前端模块化规范" class="headerlink" title="2.2 AMD (前端模块化规范)"></a>2.2 AMD (前端模块化规范)</h3><ul>
<li>加载前置,如果a模块用到b,先加载b模块，再加载a模块</li>
</ul>
<h2 id="3-seajs"><a href="#3-seajs" class="headerlink" title="3. seajs"></a>3. seajs</h2><ul>
<li><a href="http://seajs.org" target="_blank" rel="external">官网</a></li>
<li>玉铂</li>
</ul>
<hr>
<h3 id="3-1-快速开始"><a href="#3-1-快速开始" class="headerlink" title="3.1 快速开始"></a>3.1 快速开始</h3><ul>
<li>1.引包</li>
<li>2.加载主模块(./main.js) <code>seajs.use(&#39;./main.js&#39;)</code></li>
<li>3.定义主模块:(./main.js)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 调用这个方法，就是定义一个模块!</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">// 在这里可以写功能代码</span></div><div class="line"><span class="comment">// 这里的代码会被seajs调用，自动执行</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="注意堆和栈"><a href="#注意堆和栈" class="headerlink" title="注意堆和栈"></a>注意堆和栈</h3><h3 id="3-2-seajs-use"><a href="#3-2-seajs-use" class="headerlink" title="3.2 seajs.use"></a>3.2 seajs.use</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入主模块</span></div><div class="line">      <span class="comment">// 我希望得到主模块之后 做一些事情 </span></div><div class="line">      <span class="comment">// 假如说：我们要做一些事情 ，这个事情，依赖于两个模块</span></div><div class="line">      <span class="comment">// 也就是说必需这两个模块得到这后才能做</span></div><div class="line">      <span class="comment">// 可以通过第一个参数改变为数组来引入多个模块</span></div><div class="line">      <span class="comment">// 回调函数对应的参数，就是引入模块中module.exports的值</span></div><div class="line">      seajs.use([<span class="string">'./main'</span>,<span class="string">'./main2'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">mymain,mymain2</span>)</span>&#123;</div><div class="line">          <span class="comment">// 这个回调的参数值,是对应模块(./main)中module.exports的值</span></div><div class="line">          <span class="comment">// 这个回调在，seajs帮我们载入主模块之后执行</span></div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'我是seajs,use方法的回调!'</span>)</div><div class="line">          <span class="built_in">console</span>.log(mymain.class)</div><div class="line"></div><div class="line">          <span class="comment">// 同时输出名字和年龄</span></div><div class="line">          <span class="built_in">console</span>.log(mymain.class,mymain2.myage)</div><div class="line">      &#125;)</div></pre></td></tr></table></figure>
<h2 id="requireJS"><a href="#requireJS" class="headerlink" title="requireJS"></a>requireJS</h2><ul>
<li><a href="http://requirejs.org/" target="_blank" rel="external">官网</a></li>
<li>[加载前置]，先加载我们依赖的模块</li>
</ul>
<h2 id="seajs是"><a href="#seajs是" class="headerlink" title="seajs是"></a>seajs是</h2><ul>
<li>[按需加载]，我们用到时再加载！</li>
</ul>
<hr>
<h1 id="扩展！"><a href="#扩展！" class="headerlink" title="扩展！"></a>扩展！</h1><h2 id="sublime代码段"><a href="#sublime代码段" class="headerlink" title="sublime代码段"></a>sublime代码段</h2><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><ul>
<li>先寻找当前目录，再找path目录</li>
</ul>
<h2 id="关于自执行函数"><a href="#关于自执行函数" class="headerlink" title="关于自执行函数!"></a>关于自执行函数!</h2><ul>
<li>分号问题</li>
<li>1.可以在函数代码执行之前，做一些初始化操作</li>
<li>2.可以避免变量污染</li>
<li><p>3.传递一个全局变量</p>
<ul>
<li>a.可以提高速度(作用域)</li>
</ul>
</li>
<li><p>及传参问题,可以不同的库有$,防冲突。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;nodeJS-基础&quot;&gt;&lt;a href=&quot;#nodeJS-基础&quot; class=&quot;headerlink&quot; title=&quot;nodeJS 基础&quot;&gt;&lt;/a&gt;nodeJS 基础&lt;/h1&gt;&lt;h2 id=&quot;了解&quot;&gt;&lt;a href=&quot;#了解&quot; class=&quot;headerlink&quot; title=&quot;了解&quot;&gt;&lt;/a&gt;了解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;模块化！&lt;/li&gt;
&lt;li&gt;node(让我们熟悉前后端交互！)&lt;/li&gt;
&lt;li&gt;压轴!6个人!(就业!) 移动App(手机软件!,微信,qq), （移动Web,运行浏览器中的）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-非模块化的方式&quot;&gt;&lt;a href=&quot;#1-非模块化的方式&quot; class=&quot;headerlink&quot; title=&quot;1.非模块化的方式!&quot;&gt;&lt;/a&gt;1.非模块化的方式!&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;全局变量的问题:&lt;ul&gt;
&lt;li&gt;1.容易有冲突，会污染全局环境！&lt;/li&gt;
&lt;li&gt;2.js引用引用顺序很重要！&lt;br&gt;张三: var zhangsan={name,city}&lt;br&gt;李四: var lisi = {name:xx,city:’xxx’}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="nodeJS" scheme="http://www.ccyyao.top/categories/nodeJS/"/>
    
    
      <category term="非模块化的方式" scheme="http://www.ccyyao.top/tags/%E9%9D%9E%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    
      <category term="模块化规范" scheme="http://www.ccyyao.top/tags/%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/"/>
    
      <category term="快速开始" scheme="http://www.ccyyao.top/tags/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    
      <category term="关于自执行函数" scheme="http://www.ccyyao.top/tags/%E5%85%B3%E4%BA%8E%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>nodejs_p3</title>
    <link href="http://www.ccyyao.top/2016/12/12/nodejs-p3.html"/>
    <id>http://www.ccyyao.top/2016/12/12/nodejs-p3.html</id>
    <published>2016-12-12T11:01:28.000Z</published>
    <updated>2016-12-13T10:43:58.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><p>nodejs中没有dom，没有bom</p>
<ul>
<li>一个文件就是一个模块。<ul>
<li>文件是定义的变量，只能在这个文件中使用。</li>
</ul>
</li>
<li>作用域</li>
<li>node只需要自己一个人就是可以当服务器软件<ul>
<li>node中代码，可以接收前端浏览器发来的请求，并返回相应的数据。</li>
</ul>
</li>
</ul>
<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><ul>
<li>是node 的核心模块</li>
<li>node 模块：<ul>
<li>核心模块（只要安装了node就会有的模块，已经被打包了node.exe文件）</li>
<li>自定义模块（我们自己写的js模块）</li>
<li>第三方的模块（包）</li>
</ul>
</li>
<li>我们之前前端用ajax发http请求</li>
</ul>
<a id="more"></a>
<h2 id="url-模块"><a href="#url-模块" class="headerlink" title="url 模块"></a>url 模块</h2><ul>
<li>用来操作 url 的<ul>
<li>url.parse(request.url,true)</li>
</ul>
</li>
</ul>
<h2 id="fs-文件操作模块"><a href="#fs-文件操作模块" class="headerlink" title="fs 文件操作模块"></a>fs 文件操作模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs=request()</div><div class="line"><span class="comment">//  读取文件：</span></div><div class="line"><span class="comment">//  参数1：文件路径</span></div><div class="line"><span class="comment">//  参数2：文件编码</span></div><div class="line"><span class="comment">//  返回值：文件内容</span></div><div class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'./index.html'</span>,<span class="string">'utf8'</span>)</div><div class="line"><span class="comment">//  追加文件</span></div><div class="line">fs.appendFileSync(<span class="string">'./xx.js'</span>,<span class="string">'我是小明，在哪？\r\n'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 创建目录</span></div><div class="line">    <span class="comment">// 判断目录是否存在，如果不存在，则创建</span></div><div class="line">    <span class="keyword">var</span> result = fs.existsSync(<span class="string">'data'</span>) <span class="comment">// 判断当前目录是否存在data目录</span></div><div class="line">    <span class="keyword">if</span>(!result)&#123;</div><div class="line">    <span class="built_in">console</span>.log(result)</div><div class="line">    <span class="comment">// 创建目录</span></div><div class="line">    fs.mkdirSync(<span class="string">'data'</span>)<span class="comment">// 在当前目录创建data目录</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="dirname和firename"><a href="#dirname和firename" class="headerlink" title="dirname和firename"></a><strong>dirname和</strong>firename</h2><p>1, <strong>dirname 可在任意文件中直接使用,值表示当前文件所在路径字符串<br>2, </strong>firname 也可以在任意文件中使用,值表示当前文件的包含文件名的完整路径!</p>
<h2 id="按顺序执行就是同步"><a href="#按顺序执行就是同步" class="headerlink" title="按顺序执行就是同步"></a>按顺序执行就是同步</h2><h2 id="form表单，提交get请求，会把请求参数添加到url中"><a href="#form表单，提交get请求，会把请求参数添加到url中" class="headerlink" title="form表单，提交get请求，会把请求参数添加到url中"></a>form表单，提交get请求，会把请求参数添加到url中</h2><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向!"></a>重定向!</h2><ul>
<li>在响应头里加上 Location:’新地址’,并设置状态为302</li>
<li><code>res.setHeader(&#39;key&#39;,&#39;value&#39;)</code>// 设置响应头</li>
<li><code>res.writeHead(状态码)</code>// 设置状态码!</li>
<li>浏览器接收到数据后会重新向新地址跳转!</li>
</ul>
<hr>
<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><ul>
<li>node package manager</li>
<li>node的包管理工具，管理的是第三方包</li>
<li><a href="https://www.npmjs.com/" target="_blank" rel="external">官网</a></li>
<li>也能管理前端的包</li>
</ul>
<h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><ul>
<li>初始化: <code>npm init</code></li>
<li><code>npm install &lt;包名&gt;</code></li>
</ul>
<hr>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h2 id="离线文档"><a href="#离线文档" class="headerlink" title="离线文档"></a>离线文档</h2><ul>
<li><a href="https://zealdocs.org/" target="_blank" rel="external">windows版本</a></li>
<li><a href="dash">mac版本</a></li>
</ul>
<h2 id="es6-es2015-每天一点点"><a href="#es6-es2015-每天一点点" class="headerlink" title="es6/es2015 每天一点点"></a>es6/es2015 每天一点点</h2><ul>
<li>const<ul>
<li>const 声明的数据，在栈中不可变，但是如果是对象，则对应的属性值可以变，也就是堆中的值可变，栈中的地址不可以变。</li>
</ul>
</li>
<li>let<ul>
<li>let 声明的变量，作用有大括号决定。</li>
</ul>
</li>
</ul>
<h3 id="提交效率"><a href="#提交效率" class="headerlink" title="提交效率"></a>提交效率</h3><ul>
<li>组合键: <code>win+E</code>, 打开资源管理器</li>
<li>组合键: <code>wind+D</code>, 快速切换到桌面</li>
<li>组合键: <code>ctrl+shift+esc</code> 快速打开任务管理器</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;node&quot;&gt;&lt;a href=&quot;#node&quot; class=&quot;headerlink&quot; title=&quot;node&quot;&gt;&lt;/a&gt;node&lt;/h1&gt;&lt;p&gt;nodejs中没有dom，没有bom&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个文件就是一个模块。&lt;ul&gt;
&lt;li&gt;文件是定义的变量，只能在这个文件中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;作用域&lt;/li&gt;
&lt;li&gt;node只需要自己一个人就是可以当服务器软件&lt;ul&gt;
&lt;li&gt;node中代码，可以接收前端浏览器发来的请求，并返回相应的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;http&quot;&gt;&lt;a href=&quot;#http&quot; class=&quot;headerlink&quot; title=&quot;http&quot;&gt;&lt;/a&gt;http&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;是node 的核心模块&lt;/li&gt;
&lt;li&gt;node 模块：&lt;ul&gt;
&lt;li&gt;核心模块（只要安装了node就会有的模块，已经被打包了node.exe文件）&lt;/li&gt;
&lt;li&gt;自定义模块（我们自己写的js模块）&lt;/li&gt;
&lt;li&gt;第三方的模块（包）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我们之前前端用ajax发http请求&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="nodeJS" scheme="http://www.ccyyao.top/categories/nodeJS/"/>
    
    
      <category term="http" scheme="http://www.ccyyao.top/tags/http/"/>
    
      <category term="url 模块" scheme="http://www.ccyyao.top/tags/url-%E6%A8%A1%E5%9D%97/"/>
    
      <category term="fs 未见操作模块" scheme="http://www.ccyyao.top/tags/fs-%E6%9C%AA%E8%A7%81%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9D%97/"/>
    
      <category term="npm" scheme="http://www.ccyyao.top/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>H5和CSS3基础语法</title>
    <link href="http://www.ccyyao.top/2016/12/10/H5+CSS3-p1.html"/>
    <id>http://www.ccyyao.top/2016/12/10/H5+CSS3-p1.html</id>
    <published>2016-12-10T10:50:32.000Z</published>
    <updated>2016-12-10T13:17:55.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="html5-基础语法"><a href="#html5-基础语法" class="headerlink" title="html5 基础语法"></a>html5 基础语法</h1><h2 id="html5-新增标签"><a href="#html5-新增标签" class="headerlink" title="html5 新增标签"></a>html5 新增标签</h2><ul>
<li>header 头部</li>
<li>aside 侧边栏</li>
<li>nav 导航</li>
<li>footer 页脚</li>
<li>article 文章页</li>
<li>section 区块</li>
<li>作用：添加了语义性更加利于SEO优化</li>
</ul>
<a id="more"></a>
<h2 id="html5-新增的表单"><a href="#html5-新增的表单" class="headerlink" title="html5 新增的表单"></a>html5 新增的表单</h2><ul>
<li>日期：data</li>
<li>月份：month</li>
<li>星期：week</li>
<li>时间：time</li>
<li>数字：number</li>
<li>搜索：serch</li>
<li>颜色：color</li>
<li>邮件：email</li>
<li>网址：URL</li>
<li>滑动条：range</li>
<li>手机号：text</li>
</ul>
<h3 id="例如"><a href="#例如" class="headerlink" title="例如:"></a>例如:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;form action=<span class="string">""</span>&gt;</div><div class="line">		日期：&lt;input type=<span class="string">"date"</span> name=<span class="string">""</span> id=<span class="string">""</span>&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		月份：&lt;input type="month" name="" id=""&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		星期：&lt;input type="week" name="" id=""&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		时间：&lt;input type="time" name="" id=""&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		数字：&lt;input type="number" name="" id=""&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		滑动条：&lt;input type="range" name="" id="range" value="0" min="0" max="1000"&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		搜索： &lt;input type="search" name="" id=""&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		颜色：&lt;input type="color" name="" id="color"&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;input type="text" id="txt"&gt;</div><div class="line">	&lt;/form&gt;</div></pre></td></tr></table></figure>
<p><img src="http://www.ccyyao.top/images/xinzengbiaodan.png" alt="新增的表单"></p>
<h2 id="智能验证表单"><a href="#智能验证表单" class="headerlink" title="智能验证表单"></a>智能验证表单</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;!-- email  可以自动帮我们验证当前内容是否是一个合法的邮件格式 --&gt;</div><div class="line">	&lt;!-- url  可以自动帮我们验证当前内容是否是一个合法的网址 需要添加http:// --&gt;</div><div class="line">	&lt;!-- required 非空验证 是一个属性 --&gt;</div><div class="line">	&lt;!-- pattern 自定义验证规则 接受正则 --&gt;</div><div class="line">	&lt;!-- invalid  验证失败触发的事件 --&gt;</div><div class="line">	&lt;!-- DOM.setCustomValidity()  自定义弹出框的内容 接受字符串 --&gt;</div><div class="line">	&lt;form action="1.php"&gt;</div><div class="line">		</div><div class="line">		&lt;!-- 邮件：&lt;input type="email" required name="" id=""&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		网址：&lt;input type="url" required name="" id=""&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		&lt;br&gt; --&gt;</div><div class="line">		手机号：&lt;input type="text" required name="" id="tel" pattern="[0-9]&#123;11&#125;"&gt;</div><div class="line">		&lt;span class="box" id="box"&gt;&lt;/span&gt;</div><div class="line">		&lt;input type="submit" value="提交"&gt;</div><div class="line">	&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script type="text/javascript"&gt;</div><div class="line">	</div><div class="line">	var tel = document.getElementById('tel');</div><div class="line">	var span = document.getElementById('box')</div><div class="line">	tel.addEventListener('invalid', function (argument) &#123;</div><div class="line">		// 验证失败的时候触发的事件</div><div class="line">		this.setCustomValidity('亲，您输入错误了哟！！！！');</div><div class="line">	&#125;);</div><div class="line"></div><div class="line"></div><div class="line">	tel.addEventListener('input', function (argument) &#123;</div><div class="line">		var reg = /^[0-9]&#123;11&#125;$/;</div><div class="line">		var val = this.value;</div><div class="line"></div><div class="line">		if(val == '')&#123;</div><div class="line">			span.innerHTML = '亲，不能为空哟~~~';</div><div class="line">			span.style.display = 'block';</div><div class="line">		&#125;else if(!reg.test(val))&#123;</div><div class="line">			span.innerHTML = '亲，您输入有误哟~~~';</div><div class="line">			span.style.display = 'block';</div><div class="line">		&#125;else&#123;</div><div class="line">			span.innerHTML = '恭喜你，输入成功~~~';</div><div class="line">			span.style.display = 'block';</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="新增表单属性"><a href="#新增表单属性" class="headerlink" title="新增表单属性"></a>新增表单属性</h2><ul>
<li>placeholder 占位文本</li>
<li>autofocus 自动获取焦点 dom.focus()</li>
<li>autocompleted 自动补全 需要表单提交，同时要有name 属性</li>
<li>multiple 配合 file 控件实现对选</li>
<li>form配合 form 表单的id值实现关联，在任意位置都可以被提交</li>
</ul>
<h2 id="智能感应"><a href="#智能感应" class="headerlink" title="智能感应"></a>智能感应</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 利用表单的list的属性配合datalist的ID值实现智能感应 --&gt;</div><div class="line">&lt;input type="text" list="mylist"&gt;</div><div class="line">	&lt;datalist id="mylist"&gt;</div><div class="line">		&lt;option value="ps"&gt;图形处理&lt;/option&gt;</div><div class="line">		&lt;option value="ppt"&gt;幻灯片&lt;/option&gt;</div><div class="line">		&lt;option value="php"&gt;后台语言&lt;/option&gt;</div><div class="line">	&lt;/datalist&gt;</div></pre></td></tr></table></figure>
<h2 id="html5-视频方式"><a href="#html5-视频方式" class="headerlink" title="html5 视频方式"></a>html5 视频方式</h2><ul>
<li>video 添加视频</li>
<li>autoplay 默认自动播放</li>
<li>controls 控制器控件</li>
<li>loop 控制循环</li>
<li>poster 当视频还没有播放时预览图片 poster=”” 运用 source 标签切换去实现因为浏览器针对各种视频的格式的兼容不同<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">例：&lt;video scr=<span class="string">""</span> autoplay controls loop&gt;&lt;/video&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="自定义按钮控制视频的暂停和播放"><a href="#自定义按钮控制视频的暂停和播放" class="headerlink" title="自定义按钮控制视频的暂停和播放"></a>自定义按钮控制视频的暂停和播放</h2><ul>
<li>video.play() 控制视频的播放</li>
<li>video.pause() 控制视频的暂停</li>
</ul>
<h2 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h2><ul>
<li>audio 添加音频 使用和视频一样</li>
</ul>
<h2 id="JS-获取元素的两种新方式"><a href="#JS-获取元素的两种新方式" class="headerlink" title="JS 获取元素的两种新方式"></a>JS 获取元素的两种新方式</h2><ul>
<li>document.querySelector() 里面的参数可以直接写JQ类似选择器，这个选择器永远只会选择匹配成功的第一个</li>
<li>document.querySelectorAll() 参数和上面一样，但是它会将所有匹配上的元素都选择上，形成一个集合，即使出来的只有一个集合，需要用for去操控</li>
</ul>
<h2 id="JS-操作类名"><a href="#JS-操作类名" class="headerlink" title="JS 操作类名"></a>JS 操作类名</h2><ul>
<li>dom.classList.add() 增加类名</li>
<li>dom.classList.remove() 移出类名</li>
<li>dom.classList.toggle() 切换类名</li>
<li>dom.classList.contains(“class”) 判断当前元素是否具有当前类名，返回true或false</li>
</ul>
<h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><p>html5新增了一套关于自定义属性的规范 但凡是自定属性 一定是以data-开头 ，后面的内容自己自定 。在JS里面 可以通过DOM.dataset[‘自己自定义的值，不要data-‘]去获取对应的值</p>
<h2 id="进度条标签"><a href="#进度条标签" class="headerlink" title="进度条标签"></a>进度条标签</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;progress value=<span class="string">"0.5"</span>&gt;&lt;/progress&gt;</div><div class="line">&lt;meter value=<span class="string">""</span> min=<span class="string">"0"</span> max=<span class="string">"100"</span> low=<span class="string">"10"</span> high=<span class="string">"60"</span>&gt;&lt;/meter&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;html5-基础语法&quot;&gt;&lt;a href=&quot;#html5-基础语法&quot; class=&quot;headerlink&quot; title=&quot;html5 基础语法&quot;&gt;&lt;/a&gt;html5 基础语法&lt;/h1&gt;&lt;h2 id=&quot;html5-新增标签&quot;&gt;&lt;a href=&quot;#html5-新增标签&quot; class=&quot;headerlink&quot; title=&quot;html5 新增标签&quot;&gt;&lt;/a&gt;html5 新增标签&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;header 头部&lt;/li&gt;
&lt;li&gt;aside 侧边栏&lt;/li&gt;
&lt;li&gt;nav 导航&lt;/li&gt;
&lt;li&gt;footer 页脚&lt;/li&gt;
&lt;li&gt;article 文章页&lt;/li&gt;
&lt;li&gt;section 区块&lt;/li&gt;
&lt;li&gt;作用：添加了语义性更加利于SEO优化&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="HTML5+CSS3" scheme="http://www.ccyyao.top/categories/HTML5-CSS3/"/>
    
    
      <category term="html5新增标签" scheme="http://www.ccyyao.top/tags/html5%E6%96%B0%E5%A2%9E%E6%A0%87%E7%AD%BE/"/>
    
      <category term="新增表单" scheme="http://www.ccyyao.top/tags/%E6%96%B0%E5%A2%9E%E8%A1%A8%E5%8D%95/"/>
    
      <category term="添加视频方式" scheme="http://www.ccyyao.top/tags/%E6%B7%BB%E5%8A%A0%E8%A7%86%E9%A2%91%E6%96%B9%E5%BC%8F/"/>
    
      <category term="添加音频" scheme="http://www.ccyyao.top/tags/%E6%B7%BB%E5%8A%A0%E9%9F%B3%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 基础课程—jQuery其他必备知识</title>
    <link href="http://www.ccyyao.top/2016/12/01/jQuery-three.html"/>
    <id>http://www.ccyyao.top/2016/12/01/jQuery-three.html</id>
    <published>2016-12-01T08:20:09.000Z</published>
    <updated>2016-12-01T11:16:53.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-基础课程—jQuery其他必备知识"><a href="#jQuery-基础课程—jQuery其他必备知识" class="headerlink" title="jQuery 基础课程—jQuery其他必备知识"></a>jQuery 基础课程—jQuery其他必备知识</h1><h2 id="jQuery-操作-DOM"><a href="#jQuery-操作-DOM" class="headerlink" title="jQuery 操作 DOM"></a>jQuery 操作 DOM</h2><h3 id="jQuery-操作属性"><a href="#jQuery-操作属性" class="headerlink" title="jQuery 操作属性"></a>jQuery 操作属性</h3><ul>
<li>设置单个属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一个参数，需要设置的属性名</span></div><div class="line"><span class="comment">//第二个参数，对应的属性值</span></div><div class="line">attr(name,value);</div><div class="line"><span class="comment">//用法举例</span></div><div class="line">$(<span class="string">"img"</span>).attr(<span class="string">"title"</span>,<span class="string">"呵呵"</span>);</div><div class="line">$(<span class="string">"img"</span>).attr(<span class="string">"alt"</span>,<span class="string">"呵呵"</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>设置多个属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//参数是一个对象，包含了需要设置的属性名和属性值</span></div><div class="line">attr(obj);</div><div class="line"><span class="comment">//用法举例</span></div><div class="line">$(<span class="string">"img"</span>).attr(&#123;</div><div class="line">    <span class="attr">title</span>:<span class="string">"呵呵"</span>,</div><div class="line">    <span class="attr">alt</span>:<span class="string">"呵呵"</span>,</div><div class="line">    <span class="attr">style</span>:<span class="string">"opacity:.5"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>获取属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//传需要获取的属性名称，返回对应的属性值</span></div><div class="line">attr(name);</div><div class="line"><span class="comment">//用法举例</span></div><div class="line"><span class="keyword">var</span> oTitle=$(<span class="string">"img"</span>).attr(<span class="string">"title"</span>);</div><div class="line">alert(oTitle);</div></pre></td></tr></table></figure>
<p>注意：获取属性时，只会获取到第一个元素对应的属性，与css方法一样。<br>    获取属性时，如果该属性不存在，那么会返回 undefined。</p>
<ul>
<li>移出属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//参数：需要移出的属性名，如果传空，那么不会有任何操作，注意，并不是移出所有的属性，区分 removeClass。</span></div><div class="line">removeAttr(name);</div><div class="line"><span class="comment">//用法举例</span></div><div class="line">$(<span class="string">"img"</span>).removeAttr(<span class="string">"title"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>prop<br>注意：在 jQuery1.6 之后，对于 <code>checked</code> <code>selected</code> <code>disable</code> 这类 <code>boolean</code> 类型的属性来说，如果使用 <code>attr</code> 方法获取属性值，得到的不是 true 和 false，而是 <code>checked</code> 以及 <code>undefined</code>.使用 prop 方法来获取或者设置 <code>checked  selected disable</code> 这类的值，prop 方法使用跟 attr 方法一样。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置属性</span></div><div class="line">$(<span class="string">":checked"</span>).prop(<span class="string">"checked"</span>,<span class="literal">true</span>);</div><div class="line"><span class="comment">//获取属性</span></div><div class="line">$(<span class="string">":checked"</span>).prop(<span class="string">"checked"</span>);</div><div class="line"><span class="comment">//返回 true 或者 false</span></div></pre></td></tr></table></figure>
<h3 id="jQuery-操作值与内容"><a href="#jQuery-操作值与内容" class="headerlink" title="jQuery 操作值与内容"></a>jQuery 操作值与内容</h3><ul>
<li>val 方法<br>val 方法用于设置和获取表单元素的值，例如： <code>input select textarea</code> 的值</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置值</span></div><div class="line">$(<span class="string">"#name"</span>).val(<span class="string">"张三"</span>);</div><div class="line"><span class="comment">//获取值</span></div><div class="line">$(<span class="string">"#name"</span>).val();</div></pre></td></tr></table></figure>
<ul>
<li>html 方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置内容</span></div><div class="line">$(<span class="string">"div"</span>).html(<span class="string">"&lt;span&gt;这是一段内容&lt;/span&gt;"</span>);</div><div class="line"><span class="comment">//获取内容</span></div><div class="line">$(<span class="string">"div"</span>).html();</div></pre></td></tr></table></figure>
<ul>
<li>text 方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置内容</span></div><div class="line">$(<span class="string">"div"</span>).text(<span class="string">"&lt;span&gt;这是一段内容&lt;/span&gt;"</span>);</div><div class="line"><span class="comment">//获取内容</span></div><div class="line">$(<span class="string">"div"</span>).text();</div></pre></td></tr></table></figure>
<ul>
<li>html方法与 text 方法的区别：<ul>
<li>html 方法会识别 html 标签， text 方法会把内容直接当成字符串，并不会识别 html 标签。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="jQuery-操作尺寸"><a href="#jQuery-操作尺寸" class="headerlink" title="jQuery 操作尺寸"></a>jQuery 操作尺寸</h3><ul>
<li>height 设置或者获取高度</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//带参数表示设置高度</span></div><div class="line">$(<span class="string">"img"</span>).height(<span class="number">200</span>);</div><div class="line"><span class="comment">//不带参数获取高度</span></div><div class="line">$(<span class="string">"img"</span>).height();</div></pre></td></tr></table></figure>
<p>返回值是number类型，而是用<code>$(&quot;img&quot;).css(&quot;width&quot;)</code>返回的是字符串。</p>
<ul>
<li>width 设置获取宽度，与高度操作功能一样</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//带参数表示设置宽度</span></div><div class="line">$(<span class="string">"img"</span>).width(<span class="number">200</span>);</div><div class="line"><span class="comment">//不带参数获取宽度</span></div><div class="line">$(<span class="string">"img"</span>).width();</div></pre></td></tr></table></figure>
<hr>
<h3 id="jQuery-操作坐标值"><a href="#jQuery-操作坐标值" class="headerlink" title="jQuery 操作坐标值"></a>jQuery 操作坐标值</h3><ul>
<li>offset 设置或者获取元素相对文档 document 的位置</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置位置</span></div><div class="line">$(selector).offset(&#123;<span class="attr">left</span>:<span class="number">100</span>, <span class="attr">top</span>: <span class="number">150</span>&#125;);</div><div class="line"><span class="comment">//获取位置</span></div><div class="line">$(selector).offset();</div></pre></td></tr></table></figure>
<p>注意：使用 offset 操作，如果元素没有设置定位（默认 position：static）则会把 position 修改为 relative 会修改 left top。</p>
<ul>
<li>position 获取相对于其最近的有定位的父元素的位置。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取，返回值为对象：&#123;left:num,top:num&#125;;</span></div><div class="line">$(selector).position();</div></pre></td></tr></table></figure>
<p>注意：position 方法只能获取，不能设置</p>
<ul>
<li>scrollTop 设置或者获取垂直滚动条的位置</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 有参数表示设置偏移，参数为数值类型</span></div><div class="line">$(selector).scrollTop(<span class="number">100</span>);</div><div class="line"><span class="comment">// 无参数表示获取偏移</span></div><div class="line">$(selector).scrollTop();</div></pre></td></tr></table></figure>
<ul>
<li>scrollLeft 设置或者获取水平滚动条的位置</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 有参数表示设置偏移，参数为数值类型</span></div><div class="line">$(selector).scrollLeft(<span class="number">100</span>);</div><div class="line"><span class="comment">// 无参数表示获取偏移</span></div><div class="line">$(selector).scrollLeft();</div></pre></td></tr></table></figure>
<hr>
<h2 id="jQuery-事件机制"><a href="#jQuery-事件机制" class="headerlink" title="jQuery 事件机制"></a>jQuery 事件机制</h2><p>jQuery对JavaScript事件进行了封装，增加并扩展了事件处理机制。jQuery不仅提供了更加优雅的事件处理语法，而且极大的增强了事件的处理能力。</p>
<h3 id="jQuery-事件的发展历程"><a href="#jQuery-事件的发展历程" class="headerlink" title="jQuery 事件的发展历程"></a>jQuery 事件的发展历程</h3><p>简单事件绑定》bind事件绑定》delegate事件绑定》on事件绑定</p>
<ul>
<li><p>简单事件绑定</p>
<ul>
<li>click（handler） 单击事件</li>
<li>mouseenter（handler） 鼠标进入事件</li>
<li>mouseleave（handler） 鼠标离开事件</li>
<li>scroll（handler） 滚动事件</li>
<li>缺点：一次只能绑定一个事件</li>
</ul>
</li>
<li><p>bind 事件绑定<br>不推荐使用，jQuery1.7版本后被on取代</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//绑定多个事件</span></div><div class="line"><span class="comment">//第一个参数：事件类型</span></div><div class="line"><span class="comment">//第二个参数：事件处理程序</span></div><div class="line">$(<span class="string">"p"</span>).bind(<span class="string">"click mouseenter"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//事件响应方法</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>缺点：不支持动态创建出来的元素绑定事件。</p>
<ul>
<li>delegate 事件绑定，支持动态绑定事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一个参数：selector，要绑定事件的元素</span></div><div class="line"><span class="comment">// 第二个参数：事件类型</span></div><div class="line"><span class="comment">// 第三个参数：事件处理函数</span></div><div class="line">$(<span class="string">".parentBox"</span>).delegate(<span class="string">"p"</span>, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//为 .parentBox下面的所有的p标签绑定事件</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>理解：为什么delegate支持动态绑定事件？原因是事件冒泡机制，因为事件时绑定到父元素上的，由子元素触发。</p>
<ul>
<li>on 事件绑定<br>jQuery1.7之后，jQuery用 on统一了所有事件的处理方法。</li>
</ul>
<h3 id="on事件绑定"><a href="#on事件绑定" class="headerlink" title="on事件绑定"></a>on事件绑定</h3><p>优势：最现代的方法，兼容zepto移动端类似jQuery的一个库，强烈建议使用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一个参数：events 绑定事件的名称可以是由空格分隔的多个事件，标准事件或者自定义事件</span></div><div class="line"><span class="comment">//第二个参数：selector 执行事件的后代元素（可选），如果没有后代元素，那么事件将有自己执行。</span></div><div class="line"><span class="comment">//第三个参数：data 传递给处理函数的数据，事件触发的时候通过 event.data 来使用。</span></div><div class="line"><span class="comment">//第四个参数：handler 事件处理函数</span></div><div class="line">$(selector).on(events[.selector][.data][.handler]);</div><div class="line"><span class="comment">//例子：</span></div><div class="line"><span class="comment">// 表示给$(selector)绑定代理事件，当必须是它的内部元素span才能触发这个事件，支持动态绑定</span></div><div class="line">$(selector).on( <span class="string">"click"</span>,<span class="string">"span"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</div><div class="line"><span class="comment">// 表示给$(selector)绑定事件，并且由自己触发，不支持动态绑定（不使用代理）。</span></div><div class="line">$(selector).on( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</div></pre></td></tr></table></figure>
<h3 id="事件解绑"><a href="#事件解绑" class="headerlink" title="事件解绑"></a>事件解绑</h3><ul>
<li>unbind()方式：作用解绑事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(selector).unbind();<span class="comment">//解绑所有的事件</span></div><div class="line">$(selector).unbind(<span class="string">"click"</span>);<span class="comment">//解绑指定的事件</span></div></pre></td></tr></table></figure>
<ul>
<li>undelegate（） 解绑事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(selector).undelegate();<span class="comment">//解绑所欲的delegate事件</span></div><div class="line">$(selector).undelegate（<span class="string">"click"</span>）;<span class="comment">//解绑所有的click事件</span></div></pre></td></tr></table></figure>
<ul>
<li>off 方法 作用：解绑事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 解绑匹配元素的所有事件</span></div><div class="line">$(selector).off();</div><div class="line"><span class="comment">// 解绑匹配元素的所有click事件</span></div><div class="line">$(selector).off(<span class="string">"click"</span>);</div><div class="line"><span class="comment">// 解绑所有代理的click事件，元素本身的事件不会被解绑 </span></div><div class="line">$(selector).off( <span class="string">"click"</span>, <span class="string">"**"</span> );</div></pre></td></tr></table></figure>
<hr>
<h2 id="事件触发"><a href="#事件触发" class="headerlink" title="事件触发"></a>事件触发</h2><ul>
<li>简单事件触发</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(selector).click();<span class="comment">//触发click事件</span></div></pre></td></tr></table></figure>
<ul>
<li>trigger 方法触发事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(selector).trigger(<span class="string">"click"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>triggerHandler触发 事件响应方法，不触发浏览器行为<br>比如:文本框获得焦点的默认行为</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(selector).triggerHandler(<span class="string">"focus"</span>);</div></pre></td></tr></table></figure>
<h2 id="jQuery-事件对象"><a href="#jQuery-事件对象" class="headerlink" title="jQuery 事件对象"></a>jQuery 事件对象</h2><table>
<thead>
<tr>
<th>对象属性</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>event.type</td>
<td>事件类型</td>
</tr>
<tr>
<td>event.data</td>
<td>存储绑定事件时传递的附加数据</td>
</tr>
<tr>
<td>event.target</td>
<td>点了谁就是谁</td>
</tr>
<tr>
<td>event.currentTarget</td>
<td>当前DOM元素，等同于 this</td>
</tr>
<tr>
<td>event.delegateTarget</td>
<td>代理对象</td>
</tr>
<tr>
<td>screenX 和 screenY</td>
<td>对应屏幕最左上角的值</td>
</tr>
<tr>
<td>offsetX 和 offsetY</td>
<td>点击的位置距离元素的左上角的位置</td>
</tr>
<tr>
<td>clientX 和 clientY</td>
<td>距离页面左上角的位置（忽视滚动条）</td>
</tr>
<tr>
<td>pageX 和 pateY</td>
<td>距离页面顶部的左上角的位置（会计算滚动条的距离）</td>
</tr>
<tr>
<td>event.witch</td>
<td>鼠标按键类型，1=鼠标左键 2=鼠标中键 3=鼠标右键</td>
</tr>
<tr>
<td>event.keyCode</td>
<td>按下的键盘代码</td>
</tr>
<tr>
<td>event.stopPropagation()</td>
<td>阻止事件冒泡行为</td>
</tr>
<tr>
<td>return false</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="jQuery-补充"><a href="#jQuery-补充" class="headerlink" title="jQuery 补充"></a>jQuery 补充</h2><h3 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h3><p>链式编程原理：return this;<br>通常情况下，只有设置操作才能把链式编程延续下去。因为获取操作的时候，会返回获取到的相应的值，无法返回 this。</p>
<p>end(); // 筛选选择器会改变jQuery对象的DOM对象，想要回复到上一次的状态，并且返回匹配元素之前的状态。</p>
<h3 id="隐式迭代"><a href="#隐式迭代" class="headerlink" title="隐式迭代"></a>隐式迭代</h3><p>隐式迭代的意思是：在方法的内部会为匹配到的所有元素进行循环遍历，执行相应的方法；而不用我们再进行循环，简化我们的操作，方便我们调用。<br>如果获取的是多元素的值，大部分情况下返回的是第一个元素的值。<br>设置性操作的时候：设置的是所有的元素<br>获取性操作：获取的是第一个元素。</p>
<h3 id="each-方法"><a href="#each-方法" class="headerlink" title="each 方法"></a>each 方法</h3><p>有了隐式迭代，为什么还要使用each函数遍历？<br>大部分情况下是不需要使用each方法的，因为jQuery的隐式迭代特性。<br>如果要对每个元素做不同的处理，这时候就用到了each方法<br>作用：遍历jQuery对象集合，为每个匹配的元素执行一个函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 参数一表示当前元素在所有匹配元素中的索引号</span></div><div class="line"><span class="comment">// 参数二表示当前元素（DOM对象）</span></div><div class="line">$(selector).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;&#125;);</div></pre></td></tr></table></figure>
<h3 id="多库共享"><a href="#多库共享" class="headerlink" title="多库共享"></a>多库共享</h3><p>我们知道jQuery占用了$这个标识符，如果引用的其他库也用到$这个标识符，这时候为了保证每个库都能正常使用，这时候就存在了多库共存的问题。<br>后引入的$的会覆盖掉先引入的库中的$。<br>$ === jQuery<br>解决办法：<br>jQuery的$和jQuery是两个相同的变量，因此遇到多库共存的时候，可以让jquery交出$符的控制权，这个时候还是可以使用$.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log($);<span class="comment">//function(selector, context)&#123;&#125;</span></div><div class="line"><span class="comment">//$.noConflict();//释放$的控制权</span></div><div class="line"><span class="built_in">console</span>.log($);&#123;<span class="attr">name</span>:<span class="string">"zhangsan"</span>,<span class="attr">age</span>:<span class="number">12</span>&#125;</div><div class="line"></div><div class="line">jQuery(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	jQuery(<span class="string">"div"</span>).html(<span class="string">"我不是div的内容"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<h2 id="jQuery-插件机制"><a href="#jQuery-插件机制" class="headerlink" title="jQuery 插件机制"></a>jQuery 插件机制</h2><h3 id="第三方插件"><a href="#第三方插件" class="headerlink" title="第三方插件"></a>第三方插件</h3><p>jQuery有着丰富的插件，使用这些插件能给jQuery提供一些额外的功能。<br>jquery.color.js<br>animate不支持颜色的渐变，但是使用了jquery.color.js后，就可以支持颜色的渐变了。<br>如何使用第三方插件：<br>1.引入jQuery文件<br>2.引入插件<br>3.使用插件</p>
<h3 id="制作插件"><a href="#制作插件" class="headerlink" title="制作插件"></a>制作插件</h3><ul>
<li>jQuery 对象扩展方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.fn.pluginName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div></pre></td></tr></table></figure>
<h3 id="jquery-UI"><a href="#jquery-UI" class="headerlink" title="jquery UI"></a>jquery UI</h3><p>jquery UI 专指由 jQuery 官方维护的UI方向的插件。<br>官方API：<a href="http://api.jqueryui.com/category/all/" target="_blank" rel="external">http://api.jqueryui.com/category/all/</a><br>其他教程：jQueryUI教程<br>基本使用:<br>1.引入jQueryUI的样式文件<br>2.引入jQuery<br>3.引入jQueryUI的js文件<br>4.使用jQueryUI功能</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jQuery-基础课程—jQuery其他必备知识&quot;&gt;&lt;a href=&quot;#jQuery-基础课程—jQuery其他必备知识&quot; class=&quot;headerlink&quot; title=&quot;jQuery 基础课程—jQuery其他必备知识&quot;&gt;&lt;/a&gt;jQuery 基础课程—jQuery其他必备知识&lt;/h1&gt;&lt;h2 id=&quot;jQuery-操作-DOM&quot;&gt;&lt;a href=&quot;#jQuery-操作-DOM&quot; class=&quot;headerlink&quot; title=&quot;jQuery 操作 DOM&quot;&gt;&lt;/a&gt;jQuery 操作 DOM&lt;/h2&gt;&lt;h3 id=&quot;jQuery-操作属性&quot;&gt;&lt;a href=&quot;#jQuery-操作属性&quot; class=&quot;headerlink&quot; title=&quot;jQuery 操作属性&quot;&gt;&lt;/a&gt;jQuery 操作属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;设置单个属性&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//第一个参数，需要设置的属性名&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//第二个参数，对应的属性值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;attr(name,value);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//用法举例&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;img&quot;&lt;/span&gt;).attr(&lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;呵呵&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;img&quot;&lt;/span&gt;).attr(&lt;span class=&quot;string&quot;&gt;&quot;alt&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;呵呵&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="jQuery" scheme="http://www.ccyyao.top/categories/jQuery/"/>
    
    
      <category term="jQueryde的DOM操作" scheme="http://www.ccyyao.top/tags/jQueryde%E7%9A%84DOM%E6%93%8D%E4%BD%9C/"/>
    
      <category term="jQuery事件" scheme="http://www.ccyyao.top/tags/jQuery%E4%BA%8B%E4%BB%B6/"/>
    
      <category term="jQuery补充" scheme="http://www.ccyyao.top/tags/jQuery%E8%A1%A5%E5%85%85/"/>
    
      <category term="jQuery插件机制" scheme="http://www.ccyyao.top/tags/jQuery%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 基础课程—jQuery操作DOM</title>
    <link href="http://www.ccyyao.top/2016/11/29/jQuery-two.html"/>
    <id>http://www.ccyyao.top/2016/11/29/jQuery-two.html</id>
    <published>2016-11-29T11:09:47.000Z</published>
    <updated>2016-11-30T13:41:04.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-基础课程—jQuery操作DOM"><a href="#jQuery-基础课程—jQuery操作DOM" class="headerlink" title="jQuery 基础课程—jQuery操作DOM"></a>jQuery 基础课程—jQuery操作DOM</h1><h2 id="jQuery-操作样式"><a href="#jQuery-操作样式" class="headerlink" title="jQuery 操作样式"></a>jQuery 操作样式</h2><h3 id="css-操作（很重要）"><a href="#css-操作（很重要）" class="headerlink" title="css 操作（很重要）"></a>css 操作（很重要）</h3><ul>
<li>功能：设置或者修改样式，操作的是 style 属性。</li>
</ul>
<ul>
<li>设置单个样式</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// name:需要设置的样式名称</span></div><div class="line"><span class="comment">// value:对应的样式值</span></div><div class="line">css(name,value);</div><div class="line"><span class="comment">//使用案例</span></div><div class="line">$(<span class="string">"#one"</span>).css(<span class="string">"background"</span>,<span class="string">"gray"</span>); <span class="comment">//将背景修改为灰色</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>设置多个样式</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 参数是一个对象，对象中包含了需要设置的样式名和样式值</span></div><div class="line">css(obj);</div><div class="line"><span class="comment">//使用案例</span></div><div class="line">$(<span class="string">"#one"</span>).css(&#123;</div><div class="line">    <span class="string">"background"</span>:<span class="string">"gray"</span>,</div><div class="line">    <span class="string">"width"</span>:<span class="string">"400px"</span>,</div><div class="line">    <span class="string">"height"</span>:<span class="string">"200px"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>获取样式</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// name:需要获取的样式名称</span></div><div class="line">css(name);</div><div class="line"><span class="comment">//案例</span></div><div class="line">$(<span class="string">"div"</span>).css(<span class="string">"background-color"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>注意：获取样式操作只会返回第一个元素对应的样式值</li>
</ul>
<h3 id="class-操作"><a href="#class-操作" class="headerlink" title="class 操作"></a>class 操作</h3><ul>
<li>添加样式类</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// name: 需要添加的样式类名，注意参数不要带点</span></div><div class="line">addClass(name);</div><div class="line"><span class="comment">// 例子，给所有的div添加one的样式</span></div><div class="line">$(<span class="string">"div"</span>).addClass(<span class="string">"one"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>移出所有的样式</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不带参数，移出所有的样式类</span></div><div class="line">removeClass();</div><div class="line"><span class="comment">//例子，移出 div 所有的样式类</span></div><div class="line">$(<span class="string">"div"</span>).removeClass();</div></pre></td></tr></table></figure>
<ul>
<li>移出单个样式类</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// name 需要移出的样式类名</span></div><div class="line">removeClass(<span class="string">"name"</span>);</div><div class="line"><span class="comment">//例子，移出div 中 one 的样式类名</span></div><div class="line">$(<span class="string">"div"</span>).removeClass(<span class="string">"one"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>判断是否有样式类</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// name: 用于判断的样式类名，返回值为 true false</span></div><div class="line">hasClass(neme);</div><div class="line"><span class="comment">// 例子，判断第一个 div 是否有 one 的样式类</span></div><div class="line">$(<span class="string">"div"</span>).hasClass(<span class="string">"one"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>切换样式类</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// name: 需要切换的样式类名，如果有，移出该样式，如果没有，添加该样式</span></div><div class="line">toggleClass(name);</div><div class="line"><span class="comment">//例如</span></div><div class="line">$(<span class="string">"div"</span>).toggleClass(<span class="string">"one"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>经验总结：<ul>
<li>如果操作到的样式非常少，可以考虑 css 方法</li>
<li>如果从操作到的样式非常多，那么可以通过class方法来操作，将样式写到一个 class 类里面；</li>
<li>如果考虑到后期维护方便，将 css 从 js 中分离出来，那么推荐使用 class 的方式来操作。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="jQuery-动画"><a href="#jQuery-动画" class="headerlink" title="jQuery 动画"></a>jQuery 动画</h2><p>通过下拉单引入动画。<br>jQuery 提供了三组动画，这些动画都是标准的、有规律的效果，jQuery 还提供了自定义动画的功能。</p>
<h3 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h3><ul>
<li>显示(show)与隐藏(hide)是一组动画：<ul>
<li>show 方法详解：</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">show([speed], [callback]);</div><div class="line"><span class="comment">//speed(可选)：动画的执行时间</span></div><div class="line">	 <span class="number">1.</span>如果不传，就没有动画效果。</div><div class="line">	 <span class="number">2.</span>毫秒值(比如<span class="number">1000</span>),动画在<span class="number">1000</span>毫秒执行完成(推荐)</div><div class="line">   <span class="number">3.</span>固定字符串，slow(<span class="number">200</span>)、normal(<span class="number">400</span>)、fast(<span class="number">600</span>)，如果传其他字符串，则默认为normal。</div><div class="line"><span class="comment">//callback(可选):执行完动画后执行的回调函数</span></div></pre></td></tr></table></figure>
<ul>
<li><p>hide 方法详解：与 show 方法的用法完全一致。</p>
</li>
<li><p>show/hide：修改的是元素的 width height opacity</p>
</li>
</ul>
<hr>
<h2 id="滑入与滑出"><a href="#滑入与滑出" class="headerlink" title="滑入与滑出"></a>滑入与滑出</h2><p>滑入(slideUp)与滑出(slideDown)是一组动画，效果与卷帘门类似， slideDown/slideDown,使用方法与show/hide基本一致。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">slideUp(speed, callback);</div><div class="line"><span class="comment">//speed(可选)：动画的执行时间</span></div><div class="line">	 <span class="number">1.</span>如果不传，默认为normal，注意区分show/hide。</div><div class="line">	 <span class="number">2.</span>毫秒值(比如<span class="number">1000</span>),动画在<span class="number">1000</span>毫秒执行完成(推荐)</div><div class="line">   <span class="number">3.</span>固定字符串，slow(<span class="number">200</span>)、normal(<span class="number">400</span>)、fast(<span class="number">600</span>)</div><div class="line"><span class="comment">//callback(可选):执行完动画后执行的回调函数</span></div></pre></td></tr></table></figure>
<ul>
<li>滑入滑出切换</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(selector).slideToggle(speed,callback);</div><div class="line"><span class="comment">//如果是隐藏状态，那么执行slideDown操作，如果是显示状态，那么执行slideUp操作。</span></div></pre></td></tr></table></figure>
<p>slideUp/slideDown:修改的是元素的 height </p>
<hr>
<h2 id="淡入与淡出"><a href="#淡入与淡出" class="headerlink" title="淡入与淡出"></a>淡入与淡出</h2><p>fadeIn/fadeOut使用方法与show/hide、slideDown/slideUp一致。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fadeIn(speed, callback);</div><div class="line"><span class="comment">//speed(可选)：动画的执行时间</span></div><div class="line">	 <span class="number">1.</span>如果不传，默认是normal。</div><div class="line">	 <span class="number">2.</span>毫秒值(比如<span class="number">1000</span>),动画在<span class="number">1000</span>毫秒执行完成(推荐)</div><div class="line">   <span class="number">3.</span>固定字符串，slow(<span class="number">200</span>)、normal(<span class="number">400</span>)、fast(<span class="number">600</span>)</div><div class="line"><span class="comment">//callback(可选):执行完动画后执行的回调函数</span></div></pre></td></tr></table></figure>
<ul>
<li>淡入淡出切换：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fadeToggle(speed, callback);</div><div class="line"><span class="comment">//如果当前元素处于隐藏状态，那么执行fadeIn操作，如果处于显示状态，那么执行fadeOut操作。</span></div></pre></td></tr></table></figure>
<ul>
<li>淡入淡出到某个值<ul>
<li>与淡入淡出的区别：淡入淡出只能控制元素的不透明度从 完全不透明 到完全透明；而fadeTo可以指定元素不透明度的具体值。并且时间参数是必需的！</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fadeTo(speed, value, callback)<span class="comment">//可以设置具体的透明度</span></div><div class="line"><span class="comment">//speed（必须）</span></div><div class="line"><span class="comment">//value  0-1之间的数值(比如0.4)，表示淡到某一个值。</span></div><div class="line"><span class="comment">//callback(可选) 回调函数</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="动画小总结"><a href="#动画小总结" class="headerlink" title="动画小总结"></a>动画小总结</h2><ul>
<li>jQuery给我们提供了三组动画，show/hide、slideUp/slideDown、fadeIn/fadeOut</li>
<li>动画切换方法：slideToggle、fadeToggle，注意：show和hide没有切换的方法。</li>
<li>淡入淡出到某个值：fadeTo方法。</li>
<li>show/slideDown/fadeIn三个是显示效果、hide/slideUp/fadeOut三个是隐藏效果。</li>
<li>show/hide修改的是元素的height,width,opacity。slide系列方法修改的是元素的height。fade系列方法修改的是元素的opacity。这三种方法修改的这些值，都是带数字的，因为带了数字才能做渐变。</li>
</ul>
<h3 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h3><p>animate：自定义动画。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(selector).animate(&#123;params&#125;,[speed],[callback]);</div><div class="line"><span class="comment">// &#123;params&#125;：要执行动画的CSS属性，带数字（必选）</span></div><div class="line"><span class="comment">// speed：执行动画时长（可选）</span></div><div class="line"><span class="comment">// callback：动画执行完后立即执行的回调函数（可选）</span></div></pre></td></tr></table></figure>
<p>动画支持的属性：<a href="http://www.w3school.com.cn/jquery/effect_animate.asp" target="_blank" rel="external">http://www.w3school.com.cn/jquery/effect_animate.asp</a></p>
<h3 id="eeasing-参数"><a href="#eeasing-参数" class="headerlink" title="eeasing 参数"></a>eeasing 参数</h3><p>控制动画在不同元素的速度，默认为“swing”<br>“swing”：在开头和结尾移动慢，在中间移动速度快<br>“linear”：匀速移动</p>
<h3 id="动画队列问题"><a href="#动画队列问题" class="headerlink" title="动画队列问题"></a>动画队列问题</h3><p>在同一个元素上执行多个动画，那么对于这个动画来说，后面的动画会被放到动画队列中，等前面的动画执行完成了才会执行。</p>
<h3 id="停止动画"><a href="#停止动画" class="headerlink" title="停止动画"></a>停止动画</h3><p>stop 方法：停止动画效果；<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">stop(clearQueue,jumpToEnd);</div><div class="line"><span class="comment">//第一个参数，是否清楚队列</span></div><div class="line"><span class="comment">//第二个参数，是否跳转到最终效果</span></div><div class="line"><span class="comment">//常用的停止动画：stop();</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="jquery-操作-DOM-节点"><a href="#jquery-操作-DOM-节点" class="headerlink" title="jquery 操作 DOM 节点"></a>jquery 操作 DOM 节点</h2><h3 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(htmlStr);</div><div class="line"><span class="comment">//htmlStr:html 格式的字符串</span></div><div class="line">$(<span class="string">"&lt;span&gt;这是一个 span 元素 &lt;/span&gt;"</span>);</div></pre></td></tr></table></figure>
<h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><ul>
<li>添加新建的元素：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方法一：将jQuery对象添加到调用者内部的最后面。 </span></div><div class="line"><span class="comment">//var $span = $(“&lt;span&gt;这是一个span元素&lt;/span&gt;”);</span></div><div class="line">$(<span class="string">"div"</span>).append($span);</div><div class="line"><span class="comment">//方法二：参数传字符串，会自动创建成jquery对象</span></div><div class="line">$(<span class="string">"div"</span>).append(<span class="string">" &lt;span&gt; 这是一个span元素 &lt;/span&gt; "</span>);</div></pre></td></tr></table></figure>
<ul>
<li>添加已经存在的元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $p = $(<span class="string">"p"</span>);</div><div class="line">$(<span class="string">"div"</span>).append($p);</div><div class="line"><span class="comment">//注意：如果添加的是已经存在的元素，那么会把之前的元素给干掉。（类似于剪切的功能）。</span></div></pre></td></tr></table></figure>
<p>类似的用法：append  prepend  after before</p>
<ul>
<li>使用 html 方法创建元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置内容</span></div><div class="line">$(<span class="string">"div"</span>).html(<span class="string">"&lt;span&gt; 这是一段内容 &lt;/span&gt;"</span>);</div><div class="line"><span class="comment">//获取内容</span></div><div class="line">$(<span class="string">"div"</span>).html()</div></pre></td></tr></table></figure>
<h3 id="清空元素"><a href="#清空元素" class="headerlink" title="清空元素"></a>清空元素</h3><ul>
<li>empty： 清空指定节点的所有元素，自身保留（清理门户）</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).empty();<span class="comment">//清空div的所有内容（推荐使用，会清除子元素上绑定的内容，源码）</span></div></pre></td></tr></table></figure>
<ul>
<li>清空元素的第二种方法：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).html(<span class="string">""</span>);<span class="comment">//使用html方法来清空元素，不推荐使用，会造成内存泄漏，绑定的事件不会被清除。</span></div></pre></td></tr></table></figure>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><ul>
<li>remove：相比于 empty 自身也删除（自杀）。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).remove();</div></pre></td></tr></table></figure>
<h3 id="克隆元素"><a href="#克隆元素" class="headerlink" title="克隆元素"></a>克隆元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 复制$(selector)所匹配到的元素（深度复制）</span></div><div class="line"><span class="comment">//cloneNode(true)</span></div><div class="line"><span class="comment">// 返回值为复制的新元素，和原来的元素没有任何关系了。即修改新元素，不会影响到原来的元素。</span></div><div class="line">$(selector).clone();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jQuery-基础课程—jQuery操作DOM&quot;&gt;&lt;a href=&quot;#jQuery-基础课程—jQuery操作DOM&quot; class=&quot;headerlink&quot; title=&quot;jQuery 基础课程—jQuery操作DOM&quot;&gt;&lt;/a&gt;jQuery 基础课程—jQuery操作DOM&lt;/h1&gt;&lt;h2 id=&quot;jQuery-操作样式&quot;&gt;&lt;a href=&quot;#jQuery-操作样式&quot; class=&quot;headerlink&quot; title=&quot;jQuery 操作样式&quot;&gt;&lt;/a&gt;jQuery 操作样式&lt;/h2&gt;&lt;h3 id=&quot;css-操作（很重要）&quot;&gt;&lt;a href=&quot;#css-操作（很重要）&quot; class=&quot;headerlink&quot; title=&quot;css 操作（很重要）&quot;&gt;&lt;/a&gt;css 操作（很重要）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;功能：设置或者修改样式，操作的是 style 属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;设置单个样式&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// name:需要设置的样式名称&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// value:对应的样式值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;css(name,value);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//使用案例&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;#one&quot;&lt;/span&gt;).css(&lt;span class=&quot;string&quot;&gt;&quot;background&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;gray&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//将背景修改为灰色&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="jQuery" scheme="http://www.ccyyao.top/categories/jQuery/"/>
    
    
      <category term="css操作" scheme="http://www.ccyyao.top/tags/css%E6%93%8D%E4%BD%9C/"/>
    
      <category term="class操作" scheme="http://www.ccyyao.top/tags/class%E6%93%8D%E4%BD%9C/"/>
    
      <category term="jQuery操作" scheme="http://www.ccyyao.top/tags/jQuery%E6%93%8D%E4%BD%9C/"/>
    
      <category term="DOM节点" scheme="http://www.ccyyao.top/tags/DOM%E8%8A%82%E7%82%B9/"/>
    
      <category term="jQuery动画" scheme="http://www.ccyyao.top/tags/jQuery%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 基础</title>
    <link href="http://www.ccyyao.top/2016/11/28/jQuery-one.html"/>
    <id>http://www.ccyyao.top/2016/11/28/jQuery-one.html</id>
    <published>2016-11-28T06:45:57.000Z</published>
    <updated>2016-11-30T13:44:38.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-基础"><a href="#jQuery-基础" class="headerlink" title="jQuery 基础"></a>jQuery 基础</h1><h2 id="jQuery-介绍"><a href="#jQuery-介绍" class="headerlink" title="jQuery 介绍"></a>jQuery 介绍</h2><h3 id="jQuery-初识"><a href="#jQuery-初识" class="headerlink" title="jQuery 初识"></a>jQuery 初识</h3><ul>
<li>jQuery 让js的开发变得更加简单</li>
<li>jQUery 解决了浏览器的兼容问题</li>
</ul>
<a id="more"></a>
<h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ul>
<li>使用jQuery设计常见的效果</li>
<li>掌握jQuery的思想设计与理念</li>
</ul>
<hr>
<h2 id="jQuery-基本概念"><a href="#jQuery-基本概念" class="headerlink" title="jQuery 基本概念"></a>jQuery 基本概念</h2><h3 id="为什么要学jQuery？"><a href="#为什么要学jQuery？" class="headerlink" title="为什么要学jQuery？"></a>为什么要学jQuery？</h3><p><img src="http://www.ccyyao.top/images/jsquedian.png" alt="js缺点总结"></p>
<h3 id="什么是jQuery？"><a href="#什么是jQuery？" class="headerlink" title="什么是jQuery？"></a>什么是jQuery？</h3><ul>
<li>jquery 的官网： <a href="http://jquery.com" target="_blank" rel="external">http://jquery.com</a></li>
<li>jQuery 就是一个js库，使用jQuery的话，会比使用JavaScript更简单。</li>
<li>js库，吧一些常用的方法写到一个单独的js文件，使用的时候直接去引用这个js文件就可以了。</li>
</ul>
<h3 id="jQuery-主要学什么？"><a href="#jQuery-主要学什么？" class="headerlink" title="jQuery 主要学什么？"></a>jQuery 主要学什么？</h3><ul>
<li>学习jQuery 主要学习jQuery的一大堆 <code>api</code>。</li>
<li><code>API:application programming interface</code>:应用程序编程接口，说白了API就是方法。</li>
<li><code>obj.funName(params)</code>;</li>
</ul>
<blockquote>
<p>注意：方法调用的时候，都带小括号(),使用jQuery的方法的时候，不要忘了小括号。</p>
</blockquote>
<h3 id="怎么使用jQuery？（重点）"><a href="#怎么使用jQuery？（重点）" class="headerlink" title="怎么使用jQuery？（重点）"></a>怎么使用jQuery？（重点）</h3><ul>
<li><p>下载 jQuery  </p>
<ul>
<li>官网下载地址：<a href="http://jquery.com/download/" target="_blank" rel="external">http://jquery.com/download/</a></li>
</ul>
</li>
</ul>
<p><img src="http://www.ccyyao.top/images/jQueryxiazaitu.png" alt="jquery下载图"></p>
<ul>
<li>使用jQuery实现div动态展示案例的步骤： <ul>
<li>引包（引入jQuery文件） </li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"jquery-1.11.1.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li>入口函数  </li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>功能实现  </li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#btnShowDiv"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">$(<span class="string">"div"</span>).show(<span class="number">1000</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>div 动态展示案例中JavaScript 与 jquery 的对比  </li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>JavaScript</th>
<th>jquery</th>
</tr>
</thead>
<tbody>
<tr>
<td>入口函数</td>
<td>只能有一个，如果有多个，后面的会覆盖前面</td>
<td>可以有多个，并且不会发生覆盖的情况</td>
</tr>
<tr>
<td>代码容错性</td>
<td>代码容错性差，代码出现错误，会影响到后面代码的运行。</td>
<td>代码容错性好，屏蔽错误，并且不会影响后面代码的运行。</td>
</tr>
<tr>
<td>浏览器兼容性</td>
<td>兼容性差，比如火狐不支持innerText</td>
<td>对浏览器兼容性做了封装，因此不存在兼容性问题</td>
</tr>
<tr>
<td>操作复杂性</td>
<td>DOM操作复杂，对于一些简单的动画效果，实现起来比较麻烦</td>
<td>DOM操作简单，支持隐式迭代，实现动画非常简单。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="jQuery-详细解释"><a href="#jQuery-详细解释" class="headerlink" title="jQuery 详细解释"></a>jQuery 详细解释</h2><h3 id="版本介绍"><a href="#版本介绍" class="headerlink" title="版本介绍"></a>版本介绍</h3><ul>
<li>大版本分类</li>
</ul>
<ul>
<li>jquery 大版本分为 1.X和2.X(3.0)  </li>
</ul>
<p><img src="http://www.ccyyao.top/images/banben.png" alt="版本图片">  </p>
<ul>
<li>区别：2.x版本不再支持IE6/7/8</li>
</ul>
<ul>
<li><p>同一版本分类</p>
<ul>
<li>jquery.js：未压缩版本（开发版本），代码可读性高，推荐在开发和学习阶段使用，方便查看源代码。</li>
<li>jquery.min.js：压缩版本，去除了注释、换行、空格、并且将一些变量替换成了a,b,c之类的简单字符，基本没有可读性，推荐在项目生产环境使用，因为文件较小，减少网络压力。</li>
</ul>
</li>
<li><p>关于 jquery3.0 </p>
</li>
</ul>
<p><img src="http://www.ccyyao.top/images/banbensan.png" alt="版本3.0">  </p>
<p>翻译：jquery3.0现在发布了，这个版本自从2014年10月就开始测试了，我们的目标是创建一个更苗条、更快的jquery版本（并且能向后兼容）。我们已经移除了IE旧版本的解决方案，并且带来了一些较为现代的web API，但这是有道理的。3.0是2.x分支的延续，但是有一些突破性的改变。但是1.12和2.2分支将会在同一时间继续获得关键性的支持补丁。但是他们不会再有任何新的功能和重大的修订。jQuery3是jQuery的未来，如果你需要兼容IE6-8，你可以继续使用1.12版本。</p>
<h3 id="引包的注意点"><a href="#引包的注意点" class="headerlink" title="引包的注意点"></a>引包的注意点</h3><ul>
<li>忘记引包或者引包在入口函数的后面。 </li>
</ul>
<p><img src="http://www.ccyyao.top/images/yinbaocuowutu.png" alt="引包错误图"></p>
<ul>
<li>引包路径错误（404） </li>
</ul>
<p><img src="http://www.ccyyao.top/images/yinbaocuowutu.png" alt="引包路径错误">  </p>
<hr>
<h2 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h2><ul>
<li>jQUery 入口函数的两种写法</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种写法</span></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//第二种写法</span></div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;	</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="对比JavaScript的入口函数jQuery的入口函数-执行时机"><a href="#对比JavaScript的入口函数jQuery的入口函数-执行时机" class="headerlink" title="对比JavaScript的入口函数jQuery的入口函数,执行时机"></a>对比JavaScript的入口函数jQuery的入口函数,执行时机</h2><ul>
<li>JavaScript的入口函数要等到页面中所有资源（包括图片、文件）加载完成才开始执行。</li>
<li>jQuery的入口函数只会等待文档树加载完成就开始执行，并不会等待图片、文件的加载。</li>
</ul>
<hr>
<h2 id="了解jQuery的-符号"><a href="#了解jQuery的-符号" class="headerlink" title="了解jQuery的$符号"></a>了解jQuery的$符号</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="$是什么"></a>$是什么</h3><p>其实$就是一个函数：$();参数不一样，功能不一样</p>
<ul>
<li>$常用的几种情况:</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(function() &#123;&#125;);//参数是function，说明是入口函数</div><div class="line">$(“#btnSetConent”);//参数是字符串，并且以#开头，是一个标签选择，查找id=“btnSetContent”的元素</div><div class="line">$(“div”);//查找所有的div元素</div><div class="line">$(document).ready(funciton()&#123;&#125;)//将document转换成jQuery对象</div></pre></td></tr></table></figure>
<p>补充<br>$ === jQuery,也就是说能用$的地方，完全可以用jQuery，$仅仅是简写形式。</p>
<hr>
<h2 id="1-3-5jQuery对象与DOM对象之间的转换（难点）"><a href="#1-3-5jQuery对象与DOM对象之间的转换（难点）" class="headerlink" title="1.3.5jQuery对象与DOM对象之间的转换（难点）"></a>1.3.5jQuery对象与DOM对象之间的转换（难点）</h2><h3 id="什么是DOM对象？"><a href="#什么是DOM对象？" class="headerlink" title="什么是DOM对象？"></a>什么是DOM对象？</h3><p>使用JavaScript中的方法获取页面中的元素返回的对象就是dom对象。比如使用document.getElement*系列的方法返回的就是dom对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(“btnShowDiv”);</div><div class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(“div”);</div></pre></td></tr></table></figure>
<p>dom对象只可以使用dom对象的方法和属性  </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">domObject.innerHTML = “dom对象设置文本”;</div><div class="line">domObject.style.display= “block”;<span class="comment">//dom对象显示对象</span></div><div class="line">domObject.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;<span class="comment">//dom对象绑定事件</span></div></pre></td></tr></table></figure>
<h3 id="什么是jquery对象？"><a href="#什么是jquery对象？" class="headerlink" title="什么是jquery对象？"></a>什么是jquery对象？</h3><p>jquery对象就是使用jquery的方法获取页面中的元素返回的对象就是jQuery对象。比如使用$()方法返回对象都是jquery对象。  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(“div”);//标签选择器返回的jquery对象。</div><div class="line">$(“#btnShowDiv”);//id选择器返回的jquery对象。</div></pre></td></tr></table></figure>
<p>jquery对象只能使用jquery对象的方法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $obj = $(“div”);</div><div class="line">$obj.html(“jquery对象设置文本的方法”);</div><div class="line">$obj.show();<span class="comment">//jquery对象显示文本</span></div><div class="line">$obj.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);<span class="comment">//jquery对象绑定事件</span></div></pre></td></tr></table></figure>
<h3 id="错误的用法"><a href="#错误的用法" class="headerlink" title="错误的用法"></a>错误的用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(“div”).innerHTML;<span class="comment">//jquery对象不能调用dom方法</span></div><div class="line"><span class="comment">//dom对象不能调用jquery方法。</span></div><div class="line"><span class="built_in">document</span>.getElementById(“btnShowDiv”).show();</div></pre></td></tr></table></figure>
<h3 id="深入了解jQuery对象"><a href="#深入了解jQuery对象" class="headerlink" title="深入了解jQuery对象"></a>深入了解jQuery对象</h3><p>jQuery对象其实就是DOM对象的包装集（包装了DOM对象的集合）<br>联想记忆：衣服和洗衣机的关系  </p>
<h3 id="jQuery对象和DOM对象的相互转换"><a href="#jQuery对象和DOM对象的相互转换" class="headerlink" title="jQuery对象和DOM对象的相互转换"></a>jQuery对象和DOM对象的相互转换</h3><ul>
<li>jquery对象转DOM对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $li = $(“li”);</div><div class="line"><span class="comment">//第一种方法（推荐使用）</span></div><div class="line">$li[<span class="number">0</span>]</div><div class="line"><span class="comment">//第二种方法</span></div><div class="line">$li.get(<span class="number">0</span>)</div><div class="line"><span class="comment">//其实jQuery对象转DOM对象的实质就是取出jQuery对象中封装的DOM对象。</span></div></pre></td></tr></table></figure>
<ul>
<li>DOM对象转jquery对象（联想记忆：我有钱[美元]，所以我的功能就更强大）</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $obj = $(domObj);</div><div class="line"><span class="comment">// $(document).ready(function()&#123;&#125;);就是典型的DOM对象转jQuery对象</span></div></pre></td></tr></table></figure>
<h2 id="区分jQuery和JavaScript"><a href="#区分jQuery和JavaScript" class="headerlink" title="区分jQuery和JavaScript"></a>区分jQuery和JavaScript</h2><p>JavaScript是一门编程语言，jquery是用JavaScript实现的一个JavaScript库，目的是简化我们的开发。（联想记忆：不能扛着洗衣机去出差） </p>
<p><img src="http://www.ccyyao.top/images/js yu jquery qubie.png" alt="js与jquery的区别图">  </p>
<hr>
<h2 id="jQUery-选择器"><a href="#jQUery-选择器" class="headerlink" title="jQUery 选择器"></a>jQUery 选择器</h2><h3 id="jquery-选择器概念"><a href="#jquery-选择器概念" class="headerlink" title="jquery 选择器概念"></a>jquery 选择器概念</h3><ul>
<li>为什么要学习jquery 选择器？</li>
</ul>
<p>考虑兼容性的话，js提供的获取元素的方法太少了,只有两个，不能够满足我们的要求，比如想要通过class来获取元素就不行了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(“btnShowDiv”);</div><div class="line"><span class="built_in">document</span>.getElementsByTagName(“div”);</div></pre></td></tr></table></figure>
<ul>
<li>什么是jQuery选择器？</li>
</ul>
<p>jQuery选择器是jQuery为我们提供的一组方法，让我们更加方便的获取到页面中的元素。注意：jQuery选择器返回的是jQuery对象。  </p>
<pre><code class="js">$(<span class="string">"#btnShowDiv"</span>)<span class="comment">//id选择器</span>
$(<span class="string">"div"</span>)<span class="comment">//标签选择器</span>
</code></pre>
<p>jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多更加复杂的选择器。【查看jQuery文档】<br>jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。所以我们平时真正能用到的只是少数的最常用的选择器。  </p>
<hr>
<h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ID选择器</td>
<td>$(“#id”);</td>
<td>获取指定ID的元素</td>
</tr>
<tr>
<td>类选择器</td>
<td>$(“.class”);</td>
<td>获取同一类class的元素</td>
</tr>
<tr>
<td>交集选择器（标签指定式选择器）</td>
<td>$(“div.redClass”);</td>
<td>注意选择器1和选择器2之间没有空格，class为redClass的div元素，注意区分后代选择器。</td>
</tr>
</tbody>
</table>
<p>总结：跟css的选择器用法一模一样</p>
<hr>
<h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>子代选择器</td>
<td>$(“ul&gt;li”);</td>
<td>使用&gt;号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td>
</tr>
<tr>
<td>后代选择器</td>
<td>$(“ul li”);</td>
<td>使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td>
</tr>
</tbody>
</table>
<p>跟css的选择器一模一样</p>
<hr>
<h2 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h2><ul>
<li>这类选择器都带冒号：  </li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>:eq（index）</td>
<td>$(“li:eq(2)”).css(“color”, ”red”);</td>
<td>获取到的li元素中，选择索引号为2的元素，索引号index从0开始。</td>
</tr>
<tr>
<td>:odd</td>
<td>$(“li:odd”).css(“color”, ”red”);</td>
<td>获取到的li元素中，选择索引号为奇数的元素</td>
</tr>
<tr>
<td>:even</td>
<td>$(“li:even”).css(“color”, ”red”);</td>
<td>获取到的li元素中，选择索引号为偶数的元素</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="筛选选择器（方法）"><a href="#筛选选择器（方法）" class="headerlink" title="筛选选择器（方法）"></a>筛选选择器（方法）</h2><p>筛选选择器的功能与过滤选择器有点类似，但是用法不一样，筛选选择器主要是方法。  </p>
<table>
<thead>
<tr>
<th></th>
<th>用法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>children(selector)</td>
<td>$(“ul”).children(“li”)</td>
<td>相当于$(“ul&gt;li”)，子类选择器</td>
</tr>
<tr>
<td>find(selector)</td>
<td>$(“ul”).find(“li”);</td>
<td>相当于$(“ul li”),后代选择器</td>
</tr>
<tr>
<td>siblings(selector)</td>
<td>$(“#first”).siblings(“li”);</td>
<td>查找兄弟节点，不包括自己本身。</td>
</tr>
<tr>
<td>parent()</td>
<td>$(“#first”).parent();</td>
<td>查找父亲</td>
</tr>
<tr>
<td>eq(index)</td>
<td>$(“li”).eq(2);</td>
<td>相当于$(“li:eq(2)”),index从0开始</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jQuery-基础&quot;&gt;&lt;a href=&quot;#jQuery-基础&quot; class=&quot;headerlink&quot; title=&quot;jQuery 基础&quot;&gt;&lt;/a&gt;jQuery 基础&lt;/h1&gt;&lt;h2 id=&quot;jQuery-介绍&quot;&gt;&lt;a href=&quot;#jQuery-介绍&quot; class=&quot;headerlink&quot; title=&quot;jQuery 介绍&quot;&gt;&lt;/a&gt;jQuery 介绍&lt;/h2&gt;&lt;h3 id=&quot;jQuery-初识&quot;&gt;&lt;a href=&quot;#jQuery-初识&quot; class=&quot;headerlink&quot; title=&quot;jQuery 初识&quot;&gt;&lt;/a&gt;jQuery 初识&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;jQuery 让js的开发变得更加简单&lt;/li&gt;
&lt;li&gt;jQUery 解决了浏览器的兼容问题&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="jQuery" scheme="http://www.ccyyao.top/categories/jQuery/"/>
    
    
      <category term="jQuery介绍" scheme="http://www.ccyyao.top/tags/jQuery%E4%BB%8B%E7%BB%8D/"/>
    
      <category term="jQuery概念" scheme="http://www.ccyyao.top/tags/jQuery%E6%A6%82%E5%BF%B5/"/>
    
      <category term="jQuery详细解释" scheme="http://www.ccyyao.top/tags/jQuery%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A/"/>
    
      <category term="jQuery选择器" scheme="http://www.ccyyao.top/tags/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 使用指南</title>
    <link href="http://www.ccyyao.top/2016/11/27/markdown-1.html"/>
    <id>http://www.ccyyao.top/2016/11/27/markdown-1.html</id>
    <published>2016-11-27T02:05:33.000Z</published>
    <updated>2016-11-30T10:57:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul>
<li>Markdown</li>
<li>SVN</li>
<li>Git<ul>
<li>shell<br>+vi 编辑器</li>
</ul>
</li>
<li>NPM</li>
<li>bower</li>
<li>AngularJS</li>
<li>gulp</li>
</ul>
<blockquote>
<p>总而言之，这是一门教你程序员如何装 x 的技能，一起 get 吧。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>图片添加</li>
</ul>
<p><img src="tupiandizhi" alt="tupianming"></p>
<hr>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>轻量级标记语言（html、xml），2004 年被 <code>John Gruber</code> 创造，<br>它允许人们“使用易读易写的纯文本格式编写文档”，<br>Markdown 最重要的设计就是可读性，<br>Markdown 可以选择性的转换为 HTML 文档格式，<br>很多网站目前都使用了 Markdown 或者其变种，例如Github、简书等大型社区。</p>
<p>下面是一个 demo：</p>
<p>markdown 源文档：</p>
<p><img src="../img/md.png" alt="markdown"></p>
<p>转换过后的 HTML：</p>
<p><img src="../img/html.png" alt="markdown - html"></p>
<hr>
<h3 id="Markdown-的优点"><a href="#Markdown-的优点" class="headerlink" title="Markdown 的优点"></a>Markdown 的优点</h3><ul>
<li>纯文本，所以兼容性极强，可以用所有文本编辑器打开</li>
<li>专注于文字写作而不是排版</li>
<li>格式转换方便，可以轻松转换为 HTML、PPT、电子书等</li>
<li>Markdown 标记语法简单好记，可读性强</li>
</ul>
<h3 id="实时预览编辑器"><a href="#实时预览编辑器" class="headerlink" title="实时预览编辑器"></a>实时预览编辑器</h3><p><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="external">月光博客 - 好用的Markdown编辑器一览</a></p>
<ul>
<li>dillinger</li>
<li>马克飞象</li>
<li>简书</li>
<li>MarkdownPad</li>
<li>Sublime Text<ul>
<li>配合 <code>Markdown Preview</code> 插件</li>
</ul>
</li>
<li>Webstorm<ul>
<li>配合插件</li>
</ul>
</li>
<li>gitbook</li>
</ul>
<p>编辑实时预览工具只是为了辅助教学而已，<br>我们真正在进行写作的时候，其实是不需要实时预览的，<br>因为 Markdown 标记语言本身已经足够清晰了。</p>
<hr>
<h2 id="Markdown-基本语法"><a href="#Markdown-基本语法" class="headerlink" title="Markdown 基本语法"></a>Markdown 基本语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><ul>
<li>是一级列表使用 -</li>
</ul>
<ul>
<li>二级列表+</li>
</ul>
<ul>
<li>三级列表*</li>
</ul>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ol>
<li><p>有序列表直接使用序列加一个点开头，然后加一</p>
</li>
<li><p>二级有序列表  </p>
<ul>
<li>有序列表</li>
<li>有序列表</li>
</ul>
</li>
<li><p>三级列表</p>
<ol>
<li>有序嵌套1</li>
<li>有序嵌套2</li>
</ol>
</li>
</ol>
<h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>直接写字什么也不用加</p>
<h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><p>左右两个星号加粗</p>
<h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>左右一个星号斜体</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="括号里写地址">中括号里写链接的文字</a></p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><img src="tupiandizhi" alt="tupianming"></p>
<h3 id="文本引用"><a href="#文本引用" class="headerlink" title="文本引用"></a>文本引用</h3><blockquote>
<p>引用文本用大于号</p>
</blockquote>
<h3 id="行内代码引用"><a href="#行内代码引用" class="headerlink" title="行内代码引用"></a>行内代码引用</h3><p><code>文字</code> 行内代码用反引号，中间写文字</p>
<h3 id="多行代码引用"><a href="#多行代码引用" class="headerlink" title="多行代码引用"></a>多行代码引用</h3><p> 多行代码用三个反引号</p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格用 竖线</p>
<hr>
<h2 id="Markdown-相关插件"><a href="#Markdown-相关插件" class="headerlink" title="Markdown 相关插件"></a>Markdown 相关插件</h2><ul>
<li>Sublime<ul>
<li><a href="http://packagecontrol.io/" target="_blank" rel="external">http://packagecontrol.io/</a> 就是sublime 的插件生态系统网站</li>
<li>MarkdownEditing 主题、自动补齐等功能</li>
<li>MarkdownPreview 在浏览器预览</li>
<li>MarkdownTOC 自动生成导航</li>
<li>Table Editor 自动表格编辑</li>
</ul>
</li>
</ul>
<hr>
<h2 id="Markdown-使用场景"><a href="#Markdown-使用场景" class="headerlink" title="Markdown 使用场景"></a>Markdown 使用场景</h2><ul>
<li>学习笔记</li>
<li>演讲稿</li>
<li>写书（侧重于技术相关的内容非常合适）</li>
<li>个人笔记</li>
<li>文章博客</li>
<li>教学讲义</li>
<li>说明文档</li>
<li>电子邮件</li>
</ul>
<p>只要有写作的地方，都可以使用 Markdown 来书写。</p>
<hr>
<h2 id="用-Markdown-写一封漂亮的电子邮件"><a href="#用-Markdown-写一封漂亮的电子邮件" class="headerlink" title="用 Markdown 写一封漂亮的电子邮件"></a>用 Markdown 写一封漂亮的电子邮件</h2><p>为什么要用 Markdown 写电子邮件？答案是：<code>装x</code>。</p>
<p>当然不是了，Markdown 本身语法简单，使用 Markdown 写出来的内容结构也非常清晰，<br>有助于协作沟通，总而言之，使用 Markdown 可以让你更加专注写作本身。</p>
<p>其实就是讲md格式字符串转换成了html而已，这里使用一个 Chrome 插件：</p>
<p><a href="https://chrome.google.com/webstore/detail/markdown-here/elifhakcjgalahccnjkneoccemfahfoa?utm_source=chrome-ntp-icon" target="_blank" rel="external">Markdown Here</a></p>
<h2 id="使用-GitBook-制作电子书"><a href="#使用-GitBook-制作电子书" class="headerlink" title="使用 GitBook 制作电子书"></a>使用 GitBook 制作电子书</h2><p><a href="https://www.gitbook.com/" target="_blank" rel="external">GitBook</a></p>
<h2 id="自己动手做一个-Markdown-实时预览编辑器"><a href="#自己动手做一个-Markdown-实时预览编辑器" class="headerlink" title="自己动手做一个 Markdown 实时预览编辑器"></a>自己动手做一个 Markdown 实时预览编辑器</h2><p>Markdown 本身就是一个标记语言，可以通过某种方式转换成别的文本格式，本质上转换的过程其实就是做正则解析替换。</p>
<ul>
<li>如何将 markdown 格式字符串转成 html<ul>
<li>使用一个第三方包：marked</li>
</ul>
</li>
<li>给html设置样式</li>
<li>给代码块设置颜色高亮<ul>
<li><a href="https://highlightjs.rog/" target="_blank" rel="external">highlightjs</a></li>
<li>自动手动看文档尝试一下如何加上代码高亮</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Markdown&quot;&gt;&lt;a href=&quot;#Markdown&quot; class=&quot;headerlink&quot; title=&quot;Markdown&quot;&gt;&lt;/a&gt;Markdown&lt;/h1&gt;&lt;h2 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Markdown&lt;/li&gt;
&lt;li&gt;SVN&lt;/li&gt;
&lt;li&gt;Git&lt;ul&gt;
&lt;li&gt;shell&lt;br&gt;+vi 编辑器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NPM&lt;/li&gt;
&lt;li&gt;bower&lt;/li&gt;
&lt;li&gt;AngularJS&lt;/li&gt;
&lt;li&gt;gulp&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;总而言之，这是一门教你程序员如何装 x 的技能，一起 get 吧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://www.ccyyao.top/categories/Markdown/"/>
    
    
      <category term="工具使用" scheme="http://www.ccyyao.top/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Markdown" scheme="http://www.ccyyao.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>JS高级知识总结</title>
    <link href="http://www.ccyyao.top/2016/11/20/javascript-advamud.html"/>
    <id>http://www.ccyyao.top/2016/11/20/javascript-advamud.html</id>
    <published>2016-11-20T12:27:56.000Z</published>
    <updated>2016-11-30T13:51:15.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript高级知识总结"><a href="#JavaScript高级知识总结" class="headerlink" title="JavaScript高级知识总结"></a>JavaScript高级知识总结</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归就是函数自己直接或者间接的调用自己</p>
<a id="more"></a>
<h3 id="递归的两个要素"><a href="#递归的两个要素" class="headerlink" title="递归的两个要素"></a>递归的两个要素</h3><ul>
<li>自己调用自己</li>
<li>递归结束条件</li>
</ul>
<h3 id="化归思想"><a href="#化归思想" class="headerlink" title="化归思想"></a>化归思想</h3><p>由难化易，由繁化简，的思想就是化归思想</p>
<h3 id="前n项和"><a href="#前n项和" class="headerlink" title="前n项和"></a>前n项和</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fn(n) = fn(n<span class="number">-1</span>) + n</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum(n - <span class="number">1</span>) + n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fn(n) = fn(n<span class="number">-1</span>) * n</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum(n - <span class="number">1</span>) * n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fn(n) = fn(n<span class="number">-1</span>) + fn(n<span class="number">-2</span>)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>( n &lt;= <span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="递归获取指定元素的后代元素"><a href="#递归获取指定元素的后代元素" class="headerlink" title="递归获取指定元素的后代元素"></a>递归获取指定元素的后代元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params">ele</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> result = [];</div><div class="line">    <span class="keyword">var</span> children = ele.children;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++)&#123;</div><div class="line">        result.push(children[i]);</div><div class="line">        <span class="keyword">var</span> temp = getChildren(children[i]);</div><div class="line">        result = result.concat(temp);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>一个封闭的包裹结构</p>
<p>一个可以访问独立数据的函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> data = <span class="string">""</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//可以操作data数据</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>获取和设置数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> data = <span class="string">""</span>;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">getData</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> data;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">setDate</span>:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">            data = value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="for循环注册点击事件的问题"><a href="#for循环注册点击事件的问题" class="headerlink" title="for循环注册点击事件的问题"></a>for循环注册点击事件的问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; divs.length; i++)&#123;</div><div class="line">    <span class="keyword">var</span> div = divs[i];</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> j = i;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(j);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    div.onclick = outer();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="for循环中使用setTimeout"><a href="#for循环中使用setTimeout" class="headerlink" title="for循环中使用setTimeout"></a>for循环中使用setTimeout</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">    setTimeout((<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> j = i;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(j);</div><div class="line">        &#125;</div><div class="line">    &#125;()),<span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ul>
<li>硬件缓存</li>
<li>浏览器缓存</li>
<li>CDN     Content Delivery Network  内容分发网络</li>
</ul>
<h3 id="使用缓存解决递归实现的斐波那契数列的性能问题"><a href="#使用缓存解决递归实现的斐波那契数列的性能问题" class="headerlink" title="使用缓存解决递归实现的斐波那契数列的性能问题"></a>使用缓存解决递归实现的斐波那契数列的性能问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFib</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> num = arr[n];</div><div class="line">        <span class="keyword">if</span>(!num)&#123;</div><div class="line">            <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</div><div class="line">                num = <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                num = <span class="built_in">arguments</span>.callee(n - <span class="number">1</span>) + <span class="built_in">arguments</span>.callee(n - <span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line">            arr[n] = num;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> num;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="jQuery缓存实现分析"><a href="#jQuery缓存实现分析" class="headerlink" title="jQuery缓存实现分析"></a>jQuery缓存实现分析</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCache</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> cache = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(value)&#123;</div><div class="line">            cache[key] = value;</div><div class="line">            arr.push(key);</div><div class="line">            <span class="keyword">if</span>(arr.length &gt; <span class="number">50</span>)&#123;</div><div class="line">                <span class="keyword">delete</span> cache[arr.shift()];</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> cache[key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="函数的四种调用模式"><a href="#函数的四种调用模式" class="headerlink" title="函数的四种调用模式"></a>函数的四种调用模式</h2><h3 id="函数调用模式"><a href="#函数调用模式" class="headerlink" title="函数调用模式"></a>函数调用模式</h3><p>形式: 函数名();<br>this: window</p>
<h3 id="方法调用模式"><a href="#方法调用模式" class="headerlink" title="方法调用模式"></a>方法调用模式</h3><p>形式: 对象名.方法名();<br>this: 调用该方法的对象</p>
<h3 id="构造函数调用模式"><a href="#构造函数调用模式" class="headerlink" title="构造函数调用模式"></a>构造函数调用模式</h3><p>形式: new 构造函数名()<br>this: new创建出来的对象</p>
<h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObject</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.xxx = <span class="string">"xxx"</span>;</div><div class="line">    o.yyy = <span class="string">"yy"</span>;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p  = createObject();</div></pre></td></tr></table></figure>
<h4 id="寄生模式"><a href="#寄生模式" class="headerlink" title="寄生模式"></a>寄生模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CObject</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.xxx = <span class="string">"xxx"</span>;</div><div class="line">    o.yyy = <span class="string">"yy"</span>;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> CObject();</div></pre></td></tr></table></figure>
<h3 id="上下文调用模式"><a href="#上下文调用模式" class="headerlink" title="上下文调用模式"></a>上下文调用模式</h3><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">函数名.call(对象,参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3.</span>..)</div></pre></td></tr></table></figure>
<ol>
<li>调用该函数</li>
<li>将函数内部的this赋值为call的第一个参数</li>
<li><p>将第一个参数之后的所有参数，当做实参传递给函数</p>
<h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">函数名.apply(对象,数组)</div></pre></td></tr></table></figure>
</li>
<li><p>调用该函数</p>
</li>
<li>将函数内部的this赋值为apply的第一个参数</li>
<li>将第二个参数的数组，依次拆解开，将每一个元素挨个传递给函数做为实参</li>
</ol>
<h5 id="伪数组转换成数组"><a href="#伪数组转换成数组" class="headerlink" title="伪数组转换成数组"></a>伪数组转换成数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arrFake = &#123;</div><div class="line">    <span class="number">0</span>:<span class="number">1</span>,</div><div class="line">    <span class="number">1</span>:<span class="number">2</span>,</div><div class="line">    <span class="number">2</span>:<span class="number">3</span>,</div><div class="line">    <span class="attr">length</span>:<span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arrReal = [];</div><div class="line"></div><div class="line">arrReal.push.apply(arrReal, arrFake);</div><div class="line"><span class="comment">//arrReal.push(arrFake[0] , arrFake[1], arrFake[2])   相当于这句代码</span></div></pre></td></tr></table></figure>
<h5 id="求数组最大值"><a href="#求数组最大值" class="headerlink" title="求数组最大值"></a>求数组最大值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">3</span>,<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> maxNum = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr);</div></pre></td></tr></table></figure>
<h4 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function Father()&#123;</div><div class="line">    this.name = &quot;&quot;;</div><div class="line">    this.money = 99999999999999;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Son()&#123;</div><div class="line">    Father.call(this);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var s = new Son();</div></pre></td></tr></table></figure>
<h2 id="沙箱模式"><a href="#沙箱模式" class="headerlink" title="沙箱模式"></a>沙箱模式</h2><p>一个隔离的安全的环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(function(w)&#123;</div><div class="line">    //需要隔离的代码</div><div class="line">    //最顶上写 变量函数之类的申明</div><div class="line">    //逻辑代码</div><div class="line">    //如果需要，使用window对象向外界暴露接口</div><div class="line">&#125;)(window)</div></pre></td></tr></table></figure>
<p>为什么要将window作为参数传递</p>
<ol>
<li>外面无法访问里面，里面也不要去访问外面的东西</li>
<li>在代码压缩的时候，内置的对象名称无法被压缩，如果使用自己的变量，是可以压缩的</li>
</ol>
<h2 id="forEach-和-map"><a href="#forEach-和-map" class="headerlink" title="forEach 和　map"></a>forEach 和　map</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ,<span class="number">6</span>];</div><div class="line"><span class="comment">//currentEle 当前正在遍历的元素,</span></div><div class="line"><span class="comment">//currentIndex 当前遍历的元素的索引,</span></div><div class="line"><span class="comment">//currentArray 当前正在被遍历的数组</span></div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">currentEle, currentIndex, currentArray</span>)</span>&#123;</div><div class="line">    currentArray[currentIndex] = currentEle * <span class="number">2</span>;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//currentEle 当前正在遍历的元素,</span></div><div class="line"><span class="comment">//currentIndex 当前遍历的元素的索引,</span></div><div class="line"><span class="comment">//currentArray 当前正在被遍历的数组</span></div><div class="line"><span class="comment">//map如果回调函数内有返回值，会将所有调用的返回值重新组合成一个数组，作为map方法的返回值</span></div><div class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">currentEle, currentIndex, currentArray</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> currentEle * <span class="number">2</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span></div></pre></td></tr></table></figure>
<ul>
<li>变量不使用<code>var</code>声明会报错</li>
<li>不能删除不允许删除的属性</li>
<li>对象的属性不可以重名</li>
<li>函数的形参不可以重名</li>
<li>不允许使用八进制数据</li>
</ul>
<h2 id="事件兼容性处理"><a href="#事件兼容性处理" class="headerlink" title="事件兼容性处理"></a>事件兼容性处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function createRegister()&#123;</div><div class="line">    if(window.addEventListener)&#123;</div><div class="line">        return function(target, type, handler)&#123;</div><div class="line">            target.addEventListener(type, handler);</div><div class="line">        &#125;</div><div class="line">    &#125;else if(window.attachEvent)&#123;</div><div class="line">        return function(target, type, handler)&#123;</div><div class="line">            target.attachEvent(&quot;on&quot; + type, function()&#123;</div><div class="line">                handler.call(target, window.event);</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;else&#123;</div><div class="line">        return function(target, type, handler)&#123;</div><div class="line">            target[&quot;on&quot;+type] = handler;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript高级知识总结&quot;&gt;&lt;a href=&quot;#JavaScript高级知识总结&quot; class=&quot;headerlink&quot; title=&quot;JavaScript高级知识总结&quot;&gt;&lt;/a&gt;JavaScript高级知识总结&lt;/h1&gt;&lt;h2 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h2&gt;&lt;p&gt;递归就是函数自己直接或者间接的调用自己&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.ccyyao.top/categories/JavaScript/"/>
    
    
      <category term="JS递归" scheme="http://www.ccyyao.top/tags/JS%E9%80%92%E5%BD%92/"/>
    
      <category term="JS闭包" scheme="http://www.ccyyao.top/tags/JS%E9%97%AD%E5%8C%85/"/>
    
      <category term="缓存" scheme="http://www.ccyyao.top/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="沙箱模式" scheme="http://www.ccyyao.top/tags/%E6%B2%99%E7%AE%B1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="严格模式" scheme="http://www.ccyyao.top/tags/%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="事件兼容性处理" scheme="http://www.ccyyao.top/tags/%E4%BA%8B%E4%BB%B6%E5%85%BC%E5%AE%B9%E6%80%A7%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>关于主题</title>
    <link href="http://www.ccyyao.top/2016/11/17/about_themes.html"/>
    <id>http://www.ccyyao.top/2016/11/17/about_themes.html</id>
    <published>2016-11-17T11:55:51.000Z</published>
    <updated>2016-11-27T11:17:42.753Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> SPFK Hexo 主题：</strong>用了yilia主题一段时间，感觉还有很多可以提高的地方，就查阅资料，对其进行粗类的修改，但是，有其实还有很多不完善的地方，欢迎大家前捧场。<br>没想到，这么多人喜欢黑色版本的，建议不是每个人都喜欢我的这些功能，所以准备个基础版本，插件可以看教程自行安装。</p>
<a id="more"></a>
<p>注意：使用本主题请仔细查看<a href="/">Hexo 主题：SPFK</a>，</p>
<p>没有使用过Hexo的同学可以看看<a href="http://luuman.github.io/categories/Hexo/" target="_blank" rel="external">GitHub Hexo搭建</a>，另外还有一个我自己搭建时，插件的安装教程<a href="http://luuman.github.io/categories/Hexo/" target="_blank" rel="external">Hexo插件安装</a></p>
<p>正如前辈们所说，我们使用博客的目的是分享经验，总结自己，督促自己不断提升。如果你有不喜欢，不断的改进吧。只要你玩的开心！（请不要再这浪费太多精力，去丰富你的博客内容吧，骚年！）</p>
<p>声明：由于博主一直使用，关于Blog仓库，需要设置_config.yml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">## If your site is put in a subdirectory, set url as &apos;http://luuman.github.io/child&apos; and root as &apos;/child/&apos;</div><div class="line">url: http://luuman.github.io/Blog</div><div class="line">root: /Blog/</div><div class="line"># url: http://luuman.github.io</div><div class="line"># root: /</div></pre></td></tr></table></figure>
<h2 id="作品展示"><a href="#作品展示" class="headerlink" title="作品展示"></a>作品展示</h2><p>关于作品展示页面，直接去看看<a href="https://github.com/luuman/Hexo" target="_blank" rel="external">hexo仓库</a>，将必要的页面放置进去即可，样式主题已经配置。里面只要配置些图片，链接即可！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; SPFK Hexo 主题：&lt;/strong&gt;用了yilia主题一段时间，感觉还有很多可以提高的地方，就查阅资料，对其进行粗类的修改，但是，有其实还有很多不完善的地方，欢迎大家前捧场。&lt;br&gt;没想到，这么多人喜欢黑色版本的，建议不是每个人都喜欢我的这些功能，所以准备个基础版本，插件可以看教程自行安装。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.ccyyao.top/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.ccyyao.top/tags/Hexo/"/>
    
      <category term="Hexo主题" scheme="http://www.ccyyao.top/tags/Hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.ccyyao.top/2016/11/12/hello-world.html"/>
    <id>http://www.ccyyao.top/2016/11/12/hello-world.html</id>
    <published>2016-11-12T01:54:24.550Z</published>
    <updated>2016-11-30T10:58:11.892Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<a id="more"></a>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.ccyyao.top/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.ccyyao.top/tags/Hexo/"/>
    
  </entry>
  
</feed>
